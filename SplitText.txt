import pandas as pd

# Large text data
large_text = """<Question #:1
A test has a dependency on database. query. During the test, the dependency is replaced with an object called database with the method, Calculator query, that returns an array. The developer does not need to verify how many times the method has been called. Which two test approaches describe the requirement?

Choose 2 answers
A. White box
B. Stubbing
C. Black box
D. Substitution - AD Betweenrows Question #:2
Which statement parses successfully?

A. JSON. parse (' "foo" ');
B. JSON.parse (" 'foo' ");
C. JSON.parse ("foo");
D. JSON.parse ('foo'); - A Betweenrows Question #:3 
Refer to following code block:

let array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,]; 
let output =0;
for (let num of array) {
 if (output > 10) { break; } 
 if (num % 2 == 0) { continue; } 
 output += num;
}

What is the value of output after the code executes?

A. 16
B. 36
C. 11
D. 25 - A Betweenrows Question #:4 
A developer writers the code below to calculate the factorial of a given number. 

function factorial(number) {
 return number + factorial(number -1);
} 
factorial(3); 

What isthe result of executing line 04?

A. 0 
B. 6
C. -Infinity
D. RuntimeError - D Betweenrows Question #:5
Refer to following code: 

class Vehicle {
 constructor(plate) { this.plate = plate; } 
}
class Truck extends Vehicle {
 constructor(plate, weight) {
 //Missing code This.weight = weight; 
}
 displayWeight() {
 console.log('Thetruck ${this.plate} has a weight of ${this.weight} lb.');
 }
} 
let myTruck = new Truck('123AB', 5000); 
myTruck.displayWeight(); 

Which statement should be added to line 09 for the code to display 'The truck 123AB has a weight of 5000lb.'?

A. super.plate = plate;
B. super(plate);
C. this.plate = plate;
D. Vehicle.plate = plate; - B Betweenrows Question #:6
Refer to the following array:
Let arr = [ 1, 2, 3, 4, 5];

Which three options result in x evaluating as [3, 4, 5] ?

Choose 3 answers.
A. Let x= arr.filter (( a) => (a<2));
B. Let x=arr.splice(2,3);
C. Let x= arr.slice(2);
D. Let x= arr.filter((a) => ( return a>2 ));
E. Let x = arr.slice(2,3); - BCD Betweenrows Question #:7
A developer wants to leverage a module to print a price in pretty format, and has imported a method as shown below:

 Import printPrice from'/path/PricePrettyPrint.js'; 

Based on the code, what must be true about the printPrice function of the PricePrettyPrint module for this import to work?

A. printPrice must be be a named export
B. printPrice must be an all export
C. printPrice must be the default export
D. printPrice must be a multi exportc - C Betweenrows Question #:8
developer is trying to convince management that their team will benefit from using Node.js for a backend server that they are going to create. The server will be a web server that handles API requests from a website that the team has already built using HTML, CSS, and JavaScript. 

Which three benefits of Node.js can the developer use to persuade their manager? 

Choose 3 answers:
A. I nstalls with its own package manager toinstall and manage third-party libraries.
B. Ensures stability with one major release every few years.
C. Performs a static analysis on code before execution to look for runtime errors.
D. Executes server-side JavaScript code to avoid learning a new language.
E. User non blocking functionality for performant request handling. - ACE Betweenrows Question #:9
A developer wants to use a try...catch statement to catch any error that countSheep () may throw and pass it to a handleError () function. 

What is the correct implementation of the try...catch?

A. 
try {
 setTimeout(function() {
 countSheep();
 }, 1000);
} catch (e) {
 handleError(e);
}

B. 
try {
 countSheep();
} finally {
 handleError(e);
}

C. 
setTimeout(function() {
 try {
 countSheep();
 } catch (e) {
 handleError(e);
 }
}, 1000);

D.
try {
 countSheep();
} handleError(e) {
 catch(e);
} - C Betweenrows Question #:10
Cloud Kicks has a class to represent items for sale in an online store, as shownbelow: 

class Item {
 constructor (name, price) {
 this.name = name;
 this.price = price;
 }
 formattedPrice() {
 return 's' + String(this.price);
 }
} 

A new business requirement comes in that requests a ClothingItem class that should have all of the properties and methods of the Item class but will also have properties that are specific to clothes.

Which line of code properly declares the clothingItem class such that it inherits from Item? 

A. class ClothingItem implements Item {
B. class ClothingItem {
C. class ClothingItem super Item {
D. class ClothingItem extends Item { - D Betweenrows Question #:11
Refer to the expression below:

let x = ('1' + 2) == (6 * 2);

How should this expression be modified to ensure that evaluates to false? 

A. let x = ('1' + ' 2') == ( 6 * 2);
B. let x = ('1' + 2) === ( 6 * 2);
C. let x = (1 + 2) == ( '6' / 2);
D. let x = (1 + 2 ) == ( 6 / 2); - B Betweenrows Question #:12
developer removes the HTML class attribute from the checkout button, so now it is simply: 

<button>Checkout</button>.

There is a test to verifythe existence of the checkout button, however it looks for a button with class= "blue".
The test fails because no such button is found. Which type of test category describes this test?

A. True positive
B. True negative
C. False positive
D. False negative - D Betweenrows Question #:13
Referto the code below: Const pi = 3.1415326, What is the data type of pi? 

A. Double
B. Number
C. Decimal
D. Float - B Betweenrows Question #:14
Given the code below: 
01 function GameConsole (name) { 
02 this.name = name; 
03 } 
04 
05 GameConsole.prototype.load = function(gamename) { 
06 console.log( ` $(this.name) is loading agame : $(gamename) ...`); 
07 ) 
08 function Console 16 Bit (name) { 
09 GameConsole.call(this, name) ; 
10 }
11 Console16bit.prototype = Object.create ( GameConsole.prototype) ; 
12 //insert code here 
13 console.log( ` $(this.name) is loading a cartridge game :$(gamename) ...`); 
14 } 
15 const console16bit = new Console16bit(' SNEGeneziz '); 
16 console16bit.load(' Super Nonic 3x Force '); 

What should a developer insert at line 15 to output the following message using the method?

> SNEGeneziz is loading a cartridgegame: Super Monic 3x Force . . .

A. Console16bit.prototype.load(gamename) = function() {
B. Console16bit.prototype.load = function(gamename) {
C. Console16bit = Object.create(GameConsole.prototype).load - B Betweenrows Question #:15
Refer to the code below: 

let inArray = [[1, 2], [3, 4, 5]]; 

Which two statements result in the array [1, 2, 3, 4, 5]? 

Choose 2 answers
A. [ ].concat.apply([ ], inArray);
B. [ ].concat(...inArray);
C. [ ].concat.apply(inArray, [ ]);
D. [ ].concat([....inArray]); - AB Betweenrows Question #:16
Which two code snippets show working examples of a recursive function? 

Choose 2 answers
A. 
let countingDown = function(startNumber) {
 if ( startNumber >0) {
 console.log(startNumber);
 return countingDown(startNUmber);
 } else { return startNumber; }
};

B. 
function factorial (numVar) {
 if (numVar < 0) return;
 if (numVar === 0) return 1;
 return numVar -1;
}

C.
const sumToTen = numVar => {
 if (numVar < 0) return;
 return sumToTen(numVar + 1)
};

D.
const factorial = numVar => {
 if(numVar < 0) return;
 if ( numVar === 0 ) return 1;
 return numVar * factorial(numVar - 1 );
}; - AD Betweenrows Question #:17
Which three actions can be using the JavaScript browser console? 

Choose 3 answers:
A. View and change DOM the page.
B. Display a report showing the performance of a page.
C. Run code that is not related to page.
D. view , change, and debug the JavaScript code of the page.
E. View and change security cookies. - ACD Betweenrows Refer to the code below:

01 function changeValue(pparam) {
02 param = 5; 
03 }
04 let a = 10;
05 let b = a;
06
07 changeValue(b);
08 const result = a + ' - ' + b;

What is the value of result when the code executes? 

A. 10-10
B. 5-5
C. 10-5
D. 5-10 - A Betweenrows Question #:19
A developer is leading the creation of a new browser application that will serve a single page application. The teamwants to use a new web framework Minimalsit.js. The Lead developer wants to advocate for a more seasoned web framework that already has a community around it. Which two frameworks should the lead developer advocate for? 

Choose 2 answers
A. Vue
B. Angular
C. Koa
D. Express - BD Betweenrows Question #:20
A developer wants to setup a secure web server with Node.js. The developer creates a directory locally called app-server, and the first file is app-server/index.js Without using any third-party libraries, what should the developer add to index.js to create the secure web server?

A. const https = require('https');
B. const server = require('secure-server');
C. const tls = require('tls');
D. const http =require('http'); - A Betweenrows Question #:21
Refer to the code below:

let str = 'javascript';
str[0] = 'J';
str[4] = 'S';

After changing the string index values, the value of str is 'javascript'. What is the reason for this value:

A. Non-primitive values are mutable.
B. Non-primitive values are immutable.
C. Primitive values are mutable.
D. Primitive values are immutable. - D Betweenrows Question #:22
Refer to the following array:

let arr1 = [ 1, 2, 3, 4, 5 ];

Which two lines of code result in a second array, arr2 being created such that arr2 is not a reference to arr1?

A. let arr2 = arr1.slice(0, 5);
B. let arr2 = Array.from(arr1);
C. let arr2 = arr1;
D. let arr2 = arr1.sort(); - AB Betweenrows Question #:23
Given the following code:

let x =('15' + 10)*2; 

What is the value of a?

A. 3020
B. 1520
C. 50
D. 35 - A Betweenrows Question #:24
Which three statements are true about promises?

Choose 3 answers
A. The executor of a new Promise runs automatically.
B. A Promise has a .then() method.
C. A fulfilled or rejected promise will not change states.
D. A settled promise can become resolved.
E. A pending promise canbecome fulfilled, settled, or rejected. - BCE Betweenrows Question #:25
A developer has the function, shown below, that is called when a page loads. 

function onload() {
 console.log("Page has loaded!"); 
}

Where can the developer see the log statement after loading the page in the browser?

A. Terminal running the web server.
B. Browser performance toots
C. Browser javaScript console
D. On the webpage. - C Betweenrows Question #:26
Refer to the code below: 

console.log('Start'); 
Promise.resolve('Success')
 .then(function(value) { console.log('Success'); });
console.log('End'); 

What is the output after the code executes successfully?

A. End Start Success
B. Start Success End
C. Start End Success
D. Success Start End - C Betweenrows Question #:27
A developer uses a parsed JSON string to work with userInformation as in the block below:

01 const userInformation = {
02 " id " : "user-01",
03 "email" : "user01@universalcontainers.demo",
04 "age" : 25
05 }

Which two options access the email attribute in the object? 

Choose 2 answers
A. userInformation("email")
B. userInformation.get("email")
C. userInformation.email
D. userInformation(email) - AC Betweenrows Question #:28
Refer to the code snippet below:

let array = [1, 2, 3, 4,4, 5, 4, 4];
for (let i = 0; i < array.length; i++) {
 if (array[i] === 4) {
 array.splice(i, 1);
 }
}

What is the value of the array after the code executes?

A. [1, 2, 3, 4, 5, 4, 4]
B. [1, 2, 3, 4, 4, 5, 4]
C. [1, 2, 3, 4, 5, 4]
D. [1, 2, 3, 5] - C Betweenrows Question #:29
Which three options show valid methods for creating a fat arrow function? 

Choose 3 answers
A. x => ( console.log('executed') ; )
B. [ ] => ( console.log('executed') ;)
C. ( ) => ( console.log('executed') ;)
D. x,y,z => ( console.log('executed') ;)
E. (x,y,z) => ( console.log('executed') ;) - ACE Betweenrows Question #:30
Refer to code below:

try {
 try {
 throw new error('Sad trombone');
 } catch (err) {
 first = 'Why';
 } finally {
 second ='When';
 }
} catch (err) {
 second = 'Where';
}

What are the values for first and second once the code executes?

A. First is Who and second is When
B. First is Why and second is Where
C. First is Who and second is Where
D. First is Why and second is When - D Betweenrows Question #:31
Which javascript methods can be used to serialize an object into a string and deserialize a JSON string into an object, respectively?

A. JSON.stringify and JSON.parse
B. JSON.serialize and JSON.deserialize
C. JSON.encode and JSON.decode
D. JSON.parse and JSON.deserialize - A Betweenrows Question #:32
Refer to the code below:

let timeFunction = () => { 
 console.log('Timer called.'); 
}; 
let timerId = setTimeout (timedFunction, 1000);

Which statement allows a developer to cancel the scheduled timed function? 

A. removeTimeout(timedFunction);
B. removeTimeout(timerId);
C. clearTimeout(timerId);
D. clearTimeout(timedFunction); - C Betweenrows Question #:33
Refer to the code below: 

01 let car1 = new promise((_, reject) => 
02 setTimeout(reject, 2000, "Car 1 crashed in")); 
03 let car2 = new Promise(resolve => setTimeout(resolve, 1500, "Car 2 completed")); 
04 let car3 = new Promise(resolve => setTimeout (resolve, 3000, "Car 3 Completed")); 
05 Promise.race([car1, car2, car3]) 
06 .then(value => ( 
07 let result = $(value) the race. `; 
08 )) 
09 .catch( arr => ( 
10 console.log("Race is cancelled.", err); 
11 )); 

What is the value of result when Promise.race executes?

A. Car 3 completed the race.
B. Car 1 crashed in the race.
C. Car 2 completed the race.
D. Race is cancelled. - C Betweenrows Question #:34
The developer wants to test the array shown: const arr = Array(5).fill(0) Which two tests are the most accurate for this array ? 

Choose 2 answers:
A. console.assert(arr.length === 5);
B. arr.forEach(elem => console.assert(elem === 0));
C. console.assert(arr[0] === 0 && arr[ arr.length] === 0);
D. console.assert (arr.length >0); - AB Betweenrows Question #:35
Refer to the code below: 

let foodMenu1 = ['pizza', 'burger', 'French fries'];
let finalMenu = foodMenu1;
finalMenu.push('Garlic bread');

What is the value of foodMenu1 after the code executes?

A. [ 'pizza','Burger', 'French fires', 'Garlic bread']
B. [ 'pizza','Burger', 'French fires']
C. [ 'Garlic bread' , 'pizza','Burger', 'French fires' ]
D. [ 'Garlic bread'] - A Betweenrows Question #:36
Refer to the code below: 

let sayHello = () => {
 console.log ('Hello, world!'); 
}; 

Which code executes sayHello once, two minutes from now?

A. setTimeout(sayHello, 12000);
B. setInterval(sayHello, 12000);
C. setTimeout(sayHello(), 12000);
D. delay(sayHello, 12000); - A Betweenrows Question #:37
A developer wrote a fizzbuzz function that when passed in a number, returns the following: 'Fizz' if the number is divisible by 3. 'Buzz' if the number is divisible by 5. 'Fizzbuzz' if the number is divisible by both 3 and 5. Emptystring if the number is divisible by neither 3 or 5. Which two test cases will properly test scenarios for the fizzbuzz function? 

Choose 2 answers
A.
let res = fizzbuzz(5); 
console.assert (res === ' ' );

B.
let res = fizzbuzz(15); 
console.assert ( res ===' fizzbuzz ' );

C.
let res = fizzbuzz(Infinity);
console.assert (res === ' ' );

D.
let res = fizzbuzz(3); 
console.assert (res === ' buzz ' ); - BCD Betweenrows Question #:38
Which two console logs output NaN? 

Choose 2 answers
A. console.log(10 / Number('5));
B. console.log(parseInt ' ("two'));
C. console.log(10 / 0);
D. console.loeg(10 / 'five'); - BD Betweenrows Question #:39
A developer implements a function that adds a few values. 

function sum(num) {
 if (num == undefined) { num = 0; }
 return function(num2, num3) {
 if (num3 === undefined) { num3 = 0; }
 return num + num2 + num3;
 }
}

Which three options can the developer invoke for this function to get a return value of 10 ? 

Choose 3 answers
A. Sum () (20)
B. Sum (5, 5) ()
C. sum() (5, 5)
D. sum(5)(5)
E. sum(10) () - CD Betweenrows Question #:40
Which statement accurately describes the behaviour of the async/ await keyworks?

A. The associated class contains some asynchronous functions.
B. The associated function will always return apromise.
C. The associated function can only be called via asynchronous methods.
D. The associated sometimes returns a promise. - B Betweenrows Question #:41
A test has a dependency on database.query. During the test the dependency is replaced with an object called database with the method, query, that returns an array. The developer needs to verify how many times the method was called and the arguments used each time. Which two test approaches describe the requirement? 

Choose 2 answers
A. Integration
B. Black box
C. White box
D. Mocking - CD Betweenrows Question #:42
Refer to the code below:

for(let number =2 ; number <= 5 ; number += 1 ) {
 // insert code statement here
}

The developer needs to insert a code statement in the location shown. The code statement has these requirements: 
1. Does require an import 
2. Logs an error when the boolean statement evaluates to false 
3. Works in both the browser and Node.js 

Which meet the requirements?

A. assert (number % 2 === 0);
B. console.error(number % 2 === 0);
C. console.debug(number % 2 === 0);
D. console.assert(number % 2 === 0); - B Betweenrows Question #:43
A developer has two ways to write a function: 

Option A:
function Monster() {
 this.growl = () => { console.log ("Grr!"); }
}

Option B:
function Monster() {};
Monster.prototype.growl = () => {
 console.log("Grr!");
} 

After deciding on an option, the developer creates 1000 monster objects. How many growl methods are created with Option A Option B?

A. 1 growl method is created for Option A. 1000 growl methods are created for Option B.
B. 1000 growl method is created for Option A. 1 growl methods are created for Option B.
C. 1000 growl methods are created regardless of which option is used.
D. 1 growl method is created regardless of which option is used. - B Betweenrows Question #:44
Given the following code:

document.body.addEventListener('click', (event) => {
 if (/* CODE REPLACEMENT HERE */) {
 console.log('button clicked!');
 }
 }
);

Which replacement for the conditional statement on line 02 allows a developer to correctly determine that a button on page is clicked?

A. Event.clicked
B. e.nodeTarget == this
C. event.target.nodeName == 'BUTTON'
D. button.addEventListener('click') - C Betweenrows Question #:45
Giventhe code below:

const copy = JSON.stringify([
 new String('false'),
 new Bollean(false),
 undefined
]);

What is the value of copy?

A. --['false' , { }]--
B. --[false, { }]--
C. --['false' , false, undefined]--
D. --['false' ,false, null]-- - D Betweenrows Question #:46
What are two unique features of functions defined with a fat arrow as compared to normal function definition? 

Choose 2 answers
A. The function generated its own this making ituseful for separating the function's scope from its enclosing scope.
B. The function receives an argument that is always in scope, called parentThis, which is the enclosing lexical scope. C. If the function has a single expression in the function body, the expression will be evaluated and implicit returned.
C. The function uses the this from the enclosing scope - AC Betweenrows Question #:47
A developer wrote the following code: 

01 let X = object.value; 
02 
03 try { 
04 handleObjectValue(X); 
05 } catch (error) {
06 handleError(error); 
07 } 

The developer has a getNextValue function to execute after handleObjectValue(), but does not want to execute getNextValue() if an error occurs. How can the developer change the code to ensure this behavior?

A. 
03 try{ 
04 handleObjectValue(x); 
05 } catch(error){ 
06 handleError(error); 
07 } then { 
08 getNextValue(); 
09 }

B. 
03 try{ 
04 handleObjectValue(x); 
05 } catch(error){ 
06 handleError(error); 
07 } finally { 
08 getNextValue(); 
10 }

C. 
03 try{ 
04handleObjectValue(x); 
05 } catch(error){ 
06 handleError(error); 
07 } 
08 getNextValue();

D. 
03 try {
04 handleObjectValue(x) 
05 ........................ - D Betweenrows Question #:48
Given the code below: 

01 setCurrentUrl(); 
02 console.log('The current URL is: ' + url); 
03 function setCurrentUrl() { 
04 url = window.location.href;
05 }

What happens when the code executes?

A. The url variable has local scope and line 02 throws an error.
B. The url variable has global scope and line 02 executes correctly.
C. The url variable has global scope and line 02 throws an error.
D. The url variable has local scope and line 02 executes correctly. - B Betweenrows Question #:49
A developer has an ErrorHandler module that contains multiple functions. 
What kind of export be leverages sothat multiple functions can be used?

A. Named
B. All
C. Multi
D. Default - A Betweenrows Question #:50
A developer creates a simple webpage with an input field. Whena user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console. 
Here is the HTML file content: 

<input type =" text" value="Hello" name ="input">
<button type ="button">Display</button>

The developer wrote the javascript code below: 

const button = document.querySelector('button'); button.addEvenListener('click', () => {
 const input = document.querySelector('input');
 console.log(input.getAttribute('value');
}; 

When the user clicks the button, the output is always "Hello". 
What needs to be done make this code work as expected?

A. Replace line 04 with console.log(input .value);
B. Replace line 03 with const input = document.getElementByName('input');
C. Replace line 02 with button.addEventListener("onclick", function() {
D. Replace line 02 with button.addCallback("click", fu - A Betweenrows Question #:51
Universal Containers recently launched its new landing page to host a crowd-funding campaign. The page uses an external library to display some third-party ads. Once the page is fully loaded, it creates more than 50 new HTML items placed randomly inside the DOM, like the one in the code below:

All the elements includes the same ad-library-item class, They are hidden by default, and they are randomly displayed while the user navigates through the page.

A. Use the DOM inspector to prevent the load event to be fired.
B. Use the browser to execute a script that removes all the element containing the class ad-library-item.
C. Use the DOM inspector to remove all the elements containing the class ad-library-item.
D. Use the browser console to execute a script that prevents the load event to be fired. - B Betweenrows Question #:52
developer has a web server running with Node.js. The command to start the web server is node server,js. The web server started having latency issues. Instead of a one second turn around for web requests, the developer now sees a five second turnaround, 

Which command can the web developer run to see what the module is doing during the latency period?

A. DEBUG = http, https node server.js
B. NODE_DEBUG =http, https node server.js
C. DEBUG =true node server.js
D. NODE_DEBUG =true node server.js - C Betweenrows Question #:53
Refer to HTML below: 
<div id ="main">
<div id = " card-00">This card is smaller.</div>
<div id = "card-01">The width and height of this card is determined by its contents.</div>
</div>

Which expression outputs the screen width of the element with the ID card-01?

A. document.getElementById(' card-01 ').getBoundingClientRest().width
B. document.getElementById(' card-01 ').style.width
C. document.getElementById(' card-01 ').width
D. document.getElementById(' card-01 ').innerHTML.lenght*e - A Betweenrows Question #:54
A developer is required to write a function that calculates the sum of elements in an array but is getting undefinedevery time the code is executed. The developer needs to find what is missing in the code below. 

const sumFunction = arr => {
 return arr.reduce((result, current) => { // Result += current; // ), 10); 
};

Which option makes the code work as expected?

A. Replace line 02 with return arr.map(( result, current) => (
B. Replace line 04 with result = result +current;
C. Replace line 03 with if(arr.length == 0 ) ( return 0; )
D. Replace line 05 with return result; - D Betweenrows Question #:55
A developer is setting up a new Node.js server with a client library that is built using events and callbacks. The library: Will establish aweb socket connection and handle receipt of messages to the server Will be imported with require, and made available with a variable called we. The developer also wants to add error logging if a connection fails. 
Given this info, which code segment shows the correct way to set up a client with two events that listen at execution time?

A. ws.connect (( ) => { console.log('connected to client'); }).catch((error) => { console.log('ERROR' , error); }};
B. ws.on ('connect', ( ) => { console.log('connected toclient');
ws.on('error', (error) => { console.log('ERROR' , error); }); }); 
C. ws.on ('connect', ( ) => { console.log('connected to client'); }}; 
ws.on('error', (error) => { console.log('ERROR' , error); }};
D. try{ ws.connect (( ) => { console.log('connected to c - C Betweenrows Question #:56
Given the JavaScript below: 

01 function filterDOM (searchString) { 
02 const parsedSearchString = searchString && searchString.toLowerCase(); 
03 document.quesrySelectorAll('.account' ).forEach(account => ( 
04 const accountName = account.innerHTML.toLOwerCase(); 
05 account. Style.display = accountName.includes(parsedSearchString) ? /*Insert code*/; 
06 )}; 
07 } 

Which code should replace the placeholder comment on line 05 to hide accounts that do not match thesearch string?

A. ' name ' : ' block '
B. ' Block ' : ' none '
C. ' visible ' : ' hidden '
D. ' hidden ' : ' visible ' - B Betweenrows Question #:57
Why would a developer specify a package.jason as a developed forge instead of a dependency ?

A. It is required by the application in production.
B. It is only needed for local development and testing.
C. Other requiredpackages depend on it for development.
D. It should be bundled when the package is published. - B Betweenrows Question #:58
A developer has the following array of student test grades: 

let arr = [7, 8, 5, 8, 9]; 

The Teacher wants to double each score and then see an array of the students who scored more than 15 points. 
How should thedeveloper implement the request?

A. Let arr1 = arr.filter(( val) => ( return val > 15 )) .map (( num) => ( return num *2 ))
B. Let arr1 = arr.mapBy (( num) => ( return num *2 )) .filterBy (( val ) => return val > 15 ));
C. Let arr1 = arr.map((num) => num*2). Filter (( val) => val > 15);
D. Let arr1 = arr.map((num) => ( num *2)).filterBy((val) => ( val >15 )); - C Betweenrows Question #:59
A developer is asked to fix some bugs reported by users. Todo that, the developer adds a breakpoint for debugging. 

function Car(maxSpeed, color) {
 this.maxspeed = masSpeed;
 this.color = color;
 let carSpeed = document.getElementById(' CarSpeed');
 debugger;
 let fourWheels = new Car(carSpeed.value, 'red');
}

When the code execution stops at the breakpoint on line 06, which two types of information are available in the browser console? 

Choose 2 answers:
A. The values of the carSpeed and fourWheels variables
B. A variable displaying the number of instances created for theCar Object.
C. The style, event listeners and other attributes applied to the carSpeed DOM element
D. The information stored in the window.localStorage property - CD Betweenrows Question #:60
Refer to the code below: 

let car1 = new Promise((_ , reject) => setTimeout(reject, 2000, "car 1 crashed in" => 

let car2 = new Promise(resolve => setTimeout(resolve, 1500, "car 2 completed") 

let car3 = new Promise(resolve => setTimeout(resolve, 3000, "car 3 completed") 

Promise.race(( car1, car2, car3)) 
.then (value => ( Let result = '$(value) the race.';)}
.catch(arr => { console.log("Race is cancelled.", err); }); 

What is the value of result when Promise.race executes?

A. Car 3 completes the race
B. Car 2 completed the race.
C. Car 1 crashed in the race.
D. Race is cancelled. - B Betweenrows Question #:61
Refer to the code below: 

const event = new CustomEvent( //Missing Code ); obj.dispatchEvent(event); 

A developer needs to dispatch a custom event called update to send information about recordId. Which two options could a developer insert at the placeholder in line 02 to achieve this? 

Choose 2 answers
A. 'Update' , (recordId : '123abc' (
B. 'Update' , '123abc'
C. { type : 'update', recordId : '123abc' }
D. 'Update' , { Details : { recordId : '123abc' } } - AD Betweenrows Question #:62
Which option is a core Node,js module?

A. Path
B. Ios
C. Memory
D. locate - A Betweenrows Question #:63
A developer is wondering whether to use, Promise.then or Promise.catch, especially when a Promise throws an error? 
Which two promises are rejected? 
Which 2 are correct?

A. Promise.reject('cool error here').then(error => console.error(error));
B. Promise.reject('cool error here').catch(error => console.error(error));
C. New Promise((resolve, reject) => (throw 'cool error here'}).catch(error => console.error(error)) ;
D. New Promise(() => (throw 'cool error here'}).then(null, error => console.error(error))); - BC Betweenrows Question #:64
Refer to the following code: 

01 function Tiger(){ 
02 this.Type = 'Cat'; 
03 this.size = 'large'; 
04 } 
05 
06 let tony = new Tiger(); 
07 tony.roar = () =>{ 
08 console.log('They\'re great1'); 
09 }; 
10 
11 function Lion(){ 
12 this.type = 'Cat'; 
13 this.size = 'large'; 
14 }
15 
16 let leo = new Lion(); 
17 //Insert code here 
18 leo.roar(); 

Which two statements could be inserted at line 17 to enable the function call on line 18?

Choose 2 answers.
A. Leo.roar = () => { console.log('They\'re pretty good:'); };
B. Object.assign(leo,Tiger);
C. Object.assign(leo,tony);
D. Leo.prototype.roar = () => { console.log('They\'re pretty good:'); }; - AC Betweenrows Question #:65
Refer to the code below: 

01 const exec = (item, delay) =>{ 
02 newPromise(resolve => setTimeout( () => resolve(item), delay)), 
03 async function runParallel() { 
04 Const (result1, result2, result3) = await Promise.all{ 
05 [exec ('x', '100') , exec('y', 500), exec('z', '100')] 
06 ); 
07 return `parallel is done: $(result1)$(result2)$(result3)`; 
08 } } } 

Which two statements correctly execute the runParallel () function? 

Choose 2 answers
A. Async runParallel () .then(data);
B. runParallel ( ). done(function(data){ return data; });
C. runParallel () .then(data);
D. runParallel () .then(function(data) return data - BD Betweenrows Question #:66
In the browser, the window object is often used to assign variables that require the broadest scope in an application Node.js application does not have access to the window object by default. 
Which two methods are used to address this? 

Choose 2 answers
A. Use the document object instead of the window object.
B. Assign variables to the global object.
C. Create a new window object in the root file.
D. Assign variablesto module.exports and require them as needed. - B Betweenrows Question #:67
The developer wants to test this code: 

const toNumber = (strOrNum) => strOrNum; 

Which two tests are most accurate for this code? 

Choose 2 answers
A. console.assert(toNumber('2') ===2);
B. console.assert(Number.isNaN(toNumber()));
C. console.assert(toNumber('-3') < 0);
D. console.assert(toNumber () === NaN); - AC Betweenrows Question #:68
A developer wants to define a function log to be used a few times on a single-file JavaScript script.

01 // Line 1 replacement 
02 console.log('"LOG:', logInput); 
03 } 

Which two options can correctly replace line 01 and declare the function for use? 

Choose 2 answers
A. function leg(logInput) {
B. const log(loginInput) {
C. const log = (logInput) => {
D. function log = (logInput) { - AC Betweenrows Question #:69
A Developer wrote the following code to test a sum3 function that takes in an array of numbers and returns the sum of the first three number in the array, The test passes: 

let res = sum2([1, 2, 3]); 
console.assert(res === 6); 
res = sum3([1, 2, 3, 4]); 
console.assert(res === 6); 

A different developer made changes to the behavior of sum3 to instead sum all of the numbers present in the array. The test passes: Which two results occur when running the test on the updated sum3 function ? 

Choose 2 answers
A. The line 02 assertion passes.
B. The line 02 assertion fails
C. The line 05 assertion passes.
D. The line 05 assertion fails. - AD Betweenrows Question #:70
A developer has code that calculates a restaurant bill, but generates incorrectanswers while testing the code: 

function calculateBill(items) {
 let total = 0;
 total += findSubTotal(items);
 total += addTax(total);
 total += addTip(total);
 return total;
} 

Which option allows the developer to step into each function execution within calculateBill?

A. Using the debugger command on line 05.
B. Using the debugger command on line 03
C. Calling the console.trace (total) method on line 03.
D. Wrapping findSubtotal in a console.log() method. - A Betweenrows Question #:71
Teams at Universal Containers(UC) work on multiple JavaScript projects at the same time. UC is thinking about reusability and how each team can benefit from the work of others. Going open-source or public is not an option at this time. 
Which option is available to UC with npm?

A. Private packages can be scored, and scopes can be associated to a private registries.
B. Private registries are not supported by npm, but packages can be installed via URL.
C. Private packages are not supported, but they can use another package manager like yarn.
D. Private registries are not supported by npm, but packages can be installed via git. - A Betweenrows Question #:72
A developer has a formatName function that takes two arguments, firstName and lastName and returns a string. They want to schedule the function to run once after five seconds. 
What is the correct syntax to schedule this function?

A. setTimeout (formatName(), 5000, "John", "BDoe");
B. setTimeout (formatName('John', ''Doe'), 5000);
C. setTimout(() => { formatName("John', 'Doe') }, 5000);
D. setTimeout ('formatName', 5000, 'John", "Doe'); - D Betweenrows Question #:73
Universal Container(UC) just launched a new landing page, but users complain that the website is slow. A developer found some functions that cause this problem. To verify this, the developer decides to do everything and log the time each of these three suspicious functions consumes. 

console.time('Performance'); 
maybeAHeavyFunction(); 
thisCouldTakeTooLong(); 
orMaybeThisOne(); 
console.endTime('Performance'); 

Which function can the developer use to obtain the time spent by every one of the three functions?

A. console.timeLog()
B. console.getTime()
C. console.trace()
D. console.timeStamp() - A Betweenrows Question #:74
developer publishes a new version of a package with new features that do not break backward compatibility. The previous version number was 1.1.3. Following semantic versioning format, what should the new package version number be?

A. 2.0.0
B. 1.2.3
C. 1.1.4
D. 1.2.0 - D Betweenrows Question #:75
Refer to the code snippet: 

function getAvailabilityMessage(item) {
 if (getAvailability(item)) { 
 var msg = "Username available"; 
 } 
 return msg;
}

A developer writes this code to return a message to userattempting to register a new username. If the username is available, variable. 
What is the return value of msg when getAvailabilityMessage("newUserName" ) is executed and getAvailability("newUserName") returns false?

A. "Username available"
B. "newUserName"
C. "Msg is not defined"
D. undefined - D Betweenrows Question #:76
Which statement phrases successfully?

A. JSON.parse ( ' foo ' );
B. JSON.parse ( " foo " );
C. JSON.parse( " ' foo ' " );
D. JSON.parse(' " foo " '); - D Betweenrows Question #:77
Refer to the following code: 

let sampleText = 'The quick brown fox jumps'; 

A developer needs to determine if a certain substring is part of a string. Which three expressions return true for the given substring? 

Choose 3 answers
A. sampleText.includes('fox');
B. sampleText.includes(' quick ', 4);
C. sampleText.includes('Fox ', 3)
D. sampleText.includes(' fox ');
E. sampleText.includes(' quick ') !== -1; - BDE Betweenrows Question #:78
Refer to the code below: 

function foo() {
 const a =2;
 function bat() {
 console.log(a);
 }
 return bar; 
}

Why does the function bar have access to variable a?

A. Inner function's scope
B. Hoisting
C. Outer function's scope
D. Prototype chain - C Betweenrows Question #:79
Refer to the code below: 

let o = { 
 get js() {
 let city1 = String("st. Louis"); 
 let city2 = String(" New York");
 return { 
 firstCity: city1.toLowerCase(), 
 secondCity: city2.toLowerCase(), 
 } 
 }
} 

What value can a developer expect when referencing o.js.secondCity?

A. Undefined
B. ' new york '
C. ' New York '
D. An error - B Betweenrows Question #:80
Refer to the HTML below: 
<div id="main">
 <ul>
 <li>Leo</li> 
 <li>Tony</li> 
 <li>Tiger</li>
 </ul>
</div>

Which JavaScript statementresults in changing " Tony" to "Mr. T."?

A. document.querySelectorAll('$main $TONY').innerHTML = ' Mr. T. ';
B. document.querySelector('$main li:second-child').innerHTML = ' Mr. T. ';
C. document.querySelector('$main li.Tony').innerHTML = ' Mr. T. ';
D. document.querySelector('$main li:nth-child(2)'),innerHTML = ' Mr. T. '; - D Betweenrows Question #:81
Refer to code below: 

function Person() { this.firstName = 'John'; } 
Person.prototype = { Job: x => 'Developer' }; 
const myFather = new Person(); 
const result = myFather.firstName + ' ' + myFather.job(); 

What is the value of the result after line 10 executes?

A. Error: myFather.job is not a function
B. Undefined Developer
C. John undefined
D. John Developer - D Betweenrows Question #:82
Refer to the following code: 

let obj = { Foo: 1, Bar: 2 };
let output = [];
for (let something in obj) {
 output.push(something);
}
console.log(output);

What is the output line 11?

A. [1,2]
B. ["bar","foo"]
C. ["foo","bar"]
D. ["foo:1","bar:2"] - C Betweenrows Question #:83
Which statement accurately describes an aspect of promises?

A. Arguments for the callback function passed to .then() are optional.
B. In a.then() function, returning results is not necessary since callbacks will catch the result of a previous promise.
C. .then() cannot be added after a catch.
D. .then() manipulates and returns the original promise. - A Betweenrows Question #:84
A class was written to represent items for purchase in an online store, and a second class Representing items that are on sale at a discounted price. THe constructor sets the name to the first value passed in. The pseudocode is below: 

class Item { 
 constructor(name, price) { 
 ... // ConstructorImplementation
 }
} 

class SaleItem extends Item {
 constructor (name, price, discount) {
 ...//Constructor Implementation
 }
}

There is a new requirement for a developer to implement a description method that will return a brief description for Item and SaleItem. 

let regItem = new Item('Scarf', 55);
let saleItem = new SaleItem('Shirt' 80, -1);
Item.prototype.description = function () {
 return 'This is a ' + this.name;
}
console.log(regItem.description());
console.log(saleItem.description());
SaleItem.prototype.description = function () {
 return 'This is a discounted ' + this.name; 
}
console.log(regItem - B Betweenrows Question #:85
is below: The JavaScript portion is: 

01 function previewFile(){ 
02 const preview = document.querySelector('img'); 
03 const file = document.querySelector('input[type=file]').files[0]; 
04 //line 4 code 
05 reader.addEventListener("load", () =>{ 
06 preview.src = reader.result; 
07 },false); 
08 //line 8 code 
09 } 

In lines 04 and 08, which code allows the user to select an image from their local
computer , and to display the image in the browser?

A. 
04 const reader = new File(); 
08 if (file) URL.createObjectURL(file);

B. 
04 const reader = new FileReader(); 
08 if (file) URL.createObjectURL(file); 

C.
04 const reader = new File(); 
08 if (file) reader.readAsDataURL(file); 

D.
04 const reader = new FileReader(); 
08 if (file) reader.readAsDataURL(file); - D Betweenrows Question #:86
In which situation should a developer include a try .. catch block around their function call?

A. The function has an error that shouldnot be silenced.
B. The function results in an out of memory issue.
C. The function might raise a runtime error that needs to be handled.
D. The function contains scheduled code. - C Betweenrows Question #:87
Refer to the following code that imports a module named utils: 

import (foo, bar) from '/path/Utils.js';
foo();
bar();

Which two implementations of Utils.js export foo and bar such that the code above runs without error? 

Choose 2 answers

A.
// FooUtils.js and BarUtils.js exist
Import (foo) from '/path/FooUtils.js'; 
Import (boo) from ' /path/NarUtils.js'; 

B.
const foo = () => { return 'foo' ; } 
const bar = () => { return 'bar' ; } 
export { bar, foo } 

C.
Export default class { 
 foo() { return 'foo' ; } 
 bar() { return 'bar' ; } 
} 

D.
const foo = () => { return 'foo';} 
const bar = () => {return 'bar'; } 
Export default foo, bar; - BC Betweenrows Question #:88
Refer to the code below: 

01 const server = require('server'); 
02 /* Insert code here */ 

A developer imports a library that creates a web server.The imported library uses events and callbacks to start the servers 
Which code should be inserted at the line 03 to set up an event and start the web server ?

A. Server.start ();
B. server.on('connect' , ( port) = { console.log('Listening on ' , port);})
C. server()
D. serve(( port) => (
E. console.log( 'Listening on ', port) ; - B Betweenrows Question #:89
Refer to the code below? 

let searchString = ' look for this '; 

Which two options remove the whitespace from the beginning of searchString? 

Choose 2
A. answers searchString.trimEnd();
B. searchString.trimStart();
C. trimStart(searchString);
D. searchString.replace(/*\s\s*/, ''); - BD Betweenrows Question #:90
Refer to the code below: 

functionPerson(firstName, lastName, eyecolor) {
 this.firstName =firstName;
 this.lastName = lastName;
 this.eyeColor = eyeColor;
}
Person.job = 'Developer'; 
const myFather = new Person('John', 'Doe'); console.log(myFather.job);

What is the output after the codeexecutes?

A. ReferenceError: eyeColor is not defined
B. ReferenceError: assignment to undeclared variable "Person"
C. Developer
D. Undefined - D Betweenrows Question #:91
Given two expressions var1 and var2. What are two valid ways to return the logical AND of the two expressions and ensure it is data typeBoolean ? 

Choose 2 answers:
A. Boolean(var1 && var2)
B. var1 && var2
C. var1.toBoolean() && var2.toBoolean()
D. Boolean(var1) && Boolean(var2) - AD Betweenrows Question #:92
Refer to the code below: 

const resolveAfterMilliseconds = (ms) => Promise.resolve ( setTimeout (( => console.log(ms), ms )); 
const aPromise = await resolveAfterMilliseconds(500); 
const bPromise = await resolveAfterMilliseconds(500); 
await aPromise, wait bPromise; 

What is the result of runningline 05?

A. aPromise and bPromise run sequentially.
B. Neither aPromise or bPromise runs.
C. aPromise and bPromise run in parallel.
D. Only aPromise runs. - B Betweenrows Question #:93
Given the following code:

let x = null;
conlose.log(typeof x);

What is the output of line 02?

A. ''x''
B. ''null'''
C. ''object''
D. ''undefined'' - C Betweenrows Question #:94
A developer wants to iterate through an array of objects and count the objects and countthe objects whose property value, name, starts with the letter N.

const arrObj = [{"name" : "Zach"} , {"name" : "Kate"},{"name" : "Alise"},{"name" : "Bob"},{"name" : "Natham"},{"name" : "nathaniel"}

Refer to the code snippet below:

01 arrObj.reduce(( acc, curr) => {
02 //missing line 02
03 //missing line 03
04 ).0);

Which missing lines 02 and 03 return the correct count?

A. Const sum = curr.startsWith('N') ? 1: 0;
Return acc +sum
B. Const sum = curr.name.startsWith('N') ? 1: 0;
Return acc +sum
C. Const sum = curr.startsWIth('N') ? 1: 0;
Return curr+ sum
D. Constsum = curr.name.startsWIth('N') ? 1: 0;
Return curr+ sum - B Betweenrows Question #:95
Refer to the code below:

html lang="en"><table onclick="console.log(Table log');"><tr id="row1"><td>Click me!</td></tr><table>
script>

function printMessage(event) {console.log('Row log');}
let elem = document.getElementById('row1'); elem.addEventListener('click', printMessage, false); 

script
html

Which code change should be made for the console to log only Rowlog when 'Click me! ' is clicked?

A. Add.event.stopPropagation(); to window.onLoad event handler.
B. Add event.stopPropagation(); to printMessage function.
C. Add event.removeEventListener(); to window.onLoad event handler. 
D. Addevent.removeEventListener(); toprintMessage function. - B Betweenrows Question #:96
Consider type coercion, what does the following expression evaluate to? True + 3 + '100' + null

A. 104
B. 4100
C. '3100null' 
D. '4100null' - D Betweenrows Question #:97
A developer implements and calls the following code when an application state change occurs: 

const onStateChange = innerPageState => {
 window.history.pushState(newPageState, ' ', null);
}

If the back button is clicked after this method is executed, what can a developer expect?

A. A navigate event is fired with a state property that details the previous application state. 
B. The page is navigated away from and the previous page in the browser's history is loaded. 
C. The page reloads and all Javascript is reinitialized.
D. A popstate event is fired with a state property that details the application's last state. - B Betweenrows Question #:98
Refer to code below:

let a ='a';
let b;
// b = a;
console.log(b);

What is displayed when the code executes?

A. ReferenceError: b is not defined 
B. A
C. Undefined
D. Null - C Betweenrows Question #:99
A developer needs to test this function: 

01 const sum3 = (arr) => (
02 if (!arr.length) return 0,
03 if (arr.length === 1) return arr[0],
04 if (arr.length === 2) return arr[0]+ arr[1], 
05 return arr[0] + arr[1] + arr[2],
06 );

Which two assert statements are valid tests for the function? 

Choose 2 answers
A. console.assert(sum3(1, '2')) == 12);
B. console.assert(sum3(0)) == 0);
C. console.assert(sum3(-3, 2 )) == -1);
D. console.assert(sum3('hello', 2, 3, 4)) === NaN); - AC Betweenrows Question #:100
Which codestatement below correctly persists an objects in local Storage?

A.
const setLocalStorage = (storageKey, jsObject) => {
window.localStorage.setItem(storageKey, JSON.stringify(jsObject));
}

B.
const setLocalStorage = ( jsObject) => {
window.localStorage.connectObject(jsObject));
}

C.
const setLocalStorage = ( jsObject) => {
window.localStorage.setItem(jsObject);
}

D.
const setLocalStorage = (storageKey, jsObject) => {
window.localStorage.persist(storageKey, jsObject); 
} - A Betweenrows Question #:101
Given code below:

setTimeout (() => (console.log(1);). 0);
console.log(2);
new Promise((resolve, reject )) => ( setTimeout(() => ( reject(console.log(3)); ), 1000);))
.catch(() => ( console.log(4); ));
console.log(5);

What is logged to the console?

A. 2143 5
B. 2 5 13 4
C. 1243 5
D. 1253 4 - B Betweenrows Question #:102
Given the code below:

const delay = sync delay => {
 return new Promise((resolve, reject) => {
 setTimeout (resolve, delay);
 });
};
const callDelay = async () =>{
 const yup = await delay(1000);
 console.log(1);
}

What is logged to the console?

A. 1 2 3 
B. 1 3 2 
C. 2 1 3 
D. 2 3 1 - D Betweenrows Question #:103
Refer to the code below:

let textValue = '1984';

Which code assignment shows a correct way to convert this string to an integer?

A. let numberValue = Number(textValue); 
B. Let numberValue = (Number)textValue; 
C. Let numberValue = textValue.toInteger(); 
D. Let numberValue = Integer(textValue); - A Betweenrows Question #:104
Universal Containers (UC) notices that its application that allows users to search for accounts makes a network request each time a key is pressed. This results in too many requests for the server to handle.
Address this problem, UCdecides to implement a debounce function on string change handler.What are three key steps to implement this debounce function?

Choose 3 answers:
A. If there is an existing setTimeout and the search string change, allow the existing setTimeout to finish,and do not enqueue a new setTimeout.
B. When the search string changes, enqueue the request within a setTimeout.
C. Ensure that the network request has the property debounce set to true.
D. If there is an existing setTimeout and the search string changes,cancel the existing
setTimeout using the persisted timerId and replace it with a new setTimeout.
E. Store the timeId of the setTimeout last enqueued by the search string cha - ABC Betweenrows Question #:105
A developer wants to use a module named universalContainersLib and then call functions from it. How should a developer import every function from the module and then call the functions foo and bar?

A. import * from '/path/universalContainersLib.js'; universalContainersLib. foo ()7 universalContainersLib.bar ();
B. import {foo,bar} from '/path/universalCcontainersLib.js'; foo():
bar()?
C. import all from '/path/universalContainersLib.js';
universalContainersLib.foo();
universalContainersLib.bar ();
D. import * as lib from '/path/universalContainersLib.js';
lib.foo();
lib. bar (); - D Betweenrows Question #:106
Refer to code below:

let productSKU = '8675309' ;

A developer has a requirement to generate SKU numbers that are always 19 characters lon, starting with 'sku',and padded with zeros.Which statement assigns the values sku0000000008675309 ?

A. productSKU = productSKU.padStart (19. '0').padstart('sku');
B. productSKU = productSKU.padEnd (16. '0').padstart('sku');
C. productSKU = productSKU.padEnd (16. '0').padstart(19, 'sku'); 
D. productSKU = productSKU.padStart (16. '0').padstart(19, 'sku'); - D Betweenrows Question #:107
Refer to the code below:

function changeValue(param) {param = 5;}
let a = 10;
let b = 5;
changeValue(b);
const result = a+ " - "+ b;

What is the value of result when code executes?

A. 10 -10 
B. 5 -5 
C. 5 - 10 
D. 10 - 5 - A Betweenrows Question #:108
Universal Containers (UC) just launched a new landing page, but users complain that the website is slow. A developer found some functions any that might cause this problem. To verify this, the developer decides to execute everything and log the time each of these three suspicious functions consumes.
Which function can the developer use to obtain the time spent by every one of the three functions?

console.time('Performance');
maybeAHeavyFunction();
thisCouldTakeTooLong();
orMaybeThisOne();
console.endTime('Performance');

A. console. timeLog () 
B. console.timeStamp () 
C. console.trace()
D. console.getTime () - A Betweenrows Question #:109
A developer receives a comment from the Tech Lead that the code given below has error:

const monthName = 'July';
const year = 2019;
if(year === 2019) {monthName = 'June';}

Which line edit should be made to make this code run?

A. 01 let monthName ='July'; 
B. 02 let year =2019;
C. 02 const year = 2020;
D. 03 if (year == 2019) { - A Betweenrows Question #:110
Given the requirement to refactor the code above to JavaScript class format, which class definition is correct?

class Vehicle {
 constructor(name, price) {
 this.name = name;
 this.price = price;
 }
 priceInfo() {
 return `Cost of the ${this.name} is ${this.price}`;
 }
} - A Betweenrows Question #:111
eveloper wants to use a module nameduniversalContainersLib and them call functionsfrom it.How should a developer import every function from the module and then call the fuctions foo and bar ?

A. 
import * ad lib from '/path/universalContainersLib.js'; lib.foo();
lib.bar();
B. 
import (foo, bar) from '/path/universalContainersLib.js';
foo();
bar();
C. 
import all from '/path/universalContaineraLib.js';
universalContainersLib.foo();
universalContainersLib.bar();
D. 
import * from '/path/universalContaineraLib.js';
universalContainersLib.foo();
universalContainersLib.bar(); - A Betweenrows Question #:112
Refer to the code below:

const searchTest = 'Yay! Salesforce is amazing!';
let result1 = searchText.search(/sales/i);
let result 21 = searchText.search(/sales/i);
console.log(result1);
console.log(result2);

After running this code, which result is displayed on the console?

A.
>true 
>false 

B. 
>5 
>undefined 

C. 
>5 
>-1

D. 
>5 
>0 - B Betweenrows Question #:113
A developer is debugging a web server that uses Node.js The server hits a runtimeerror every third request to an important endpoint on the web server.The developer added a break point to the start script, that is at index.js at he root of the server's source code. The developer wants to make use of chrome DevTools to debug. 
Which command can be run to access DevTools and make sure the breakdown is hit?

A. node -i index.js
B. Node --inspect-brk index.js 
C. Node inspect index.js
D. Node --inspect index.js - D Betweenrows Question #:114
developer uses the code below to format a date.

const date = new Date(2020, 05, 10);
const dateDisplayOptions = {
 year: 'numeric',
 month: 'long',
 day: 'numeric',
};

After executing, what is the value offormattedDate? 

A. May 10, 2020
B. June 10, 2020
C. October 05, 2020
D. November 05, 2020 - A Betweenrows Question #:115
GIven a value, which three options can a developer use to detect if the value is NaN? 

Choose 3 answers !
A. value == NaN
B. Object.is(value, NaN)
C. value === Number.NaN
D. value ! == value
E. Number.isNaN(value) - A B E Betweenrows Question #:116
Refer to code below: 

console.log(0); 
setTimeout(() => ( console.log(1); ));
console.log(2);
setTimeout(() => {console.log(3);), 0);
console.log(4);

In which sequence will the numbers be logged?

A. 01234 
B. 02431 
C. 02413 
D. 13024 - C Betweenrows Question #:117
Refer to the following code: 

function test(val) {
 if (val === undefined) {
 return 'Undefined values!'; 
 }
 if (val === null) {
 return 'Null value! ';
 }
 return val;
}
let x;
test(x);

What is returned by the function call on line 13?

A. Undefined
B. Line 13 throws an error. 
C. 'Undefined values!'
D. 'Null value!' - A Betweenrows Question #:118
A developer is working on an ecommerce website where the delivery date is dynamically calculated based on the current day. The code line below is responsible for this calculation. 

const deliveryDate = new Date();

Due to changes in the business requirements, the delivery date must now be today's
date + 9 days.
Which code meets thisnew requirement?

A. deliveryDate.setDate(( new Date ( )).getDate () +9); 
B. deliveryDate.setDate( Date.current () + 9);
C. deliveryDate.date = new Date(+9) ;
D. deliveryDate.date = Date.current () + 9; - A Betweenrows Question #:119
Refer to HTML below:<p> The current status of an Order: 

<span id ="status"> In Progress </span> </p>

Which JavaScript statement changes the text 'In Progress' to 'Completed'?

A. document.getElementById("status").Value = 'Completed' ;
B. document.getElementById("#status").innerHTML = 'Completed' ; 
C. document.getElementById("status").innerHTML = 'Completed' ; 
D. document.getElementById(".status").innerHTML = 'Completed' ; - C Betweenrows Question #:120
Refer to the following code that performs a basic mathematical operation on a provided input:

function calculate(num) {
 return (num +10) / 3;
}

How should line 02 be written to ensure thatx evaluates to 6 in the line below? 
let x = calculate (8);

A. Return Number((num +10) /3 ); 
B. Return (Number (num +10 ) / 3; 
C. Return Integer(num +10) /3;
D. Return Number(num + 10) / 3; - B Betweenrows Question #:121
Refer to code below:

function muFunction(reassign){
 let x = 1;
 var y = 1;
 if( reassign ) {
 let x= 2;
 var y=2;
 console.log(x);
 console.log(y);
 }
 console.log(x);
 console.log(y);
}

What isdisplayed when myFunction(true) is called?

A. 2 2 1 1
B. 2 2 undefined undefined 
C. 2 2 1 2
D. 2 2 2 2 - C Betweenrows Question #:122
A developer creates an object where its properties should be immutable and prevent properties from being added or modified.
Which method shouldbe used to execute this business requirement ?

A. Object.const() 
B. Object.eval() 
C. Object.lock() 
D. Object.freeze() - D Betweenrows Question #:123
Which function should a developer use to repeatedly execute code at a fixed interval? 

A. setIntervel
B. setTimeout
C. setPeriod
D. setInteria - A Betweenrows Question #:124
A developer at Universal Containers creates a new landing page based on HTML, CSS, and JavaScript TO ensure that visitors have a good experience, a script named personaliseContext needs to be executed when the webpage is fully loaded (HTML content and all related files ), in order to do some custom initialization.
Which statement should beused to call personalizeWebsiteContent based on the above business requirement?

A. document.addEventListener(''onDOMContextLoaded', personalizeWebsiteContext); 
B. window.addEventListener('load',personalizeWebsiteContext);
C. 
window.addEventListener('onload', personalizeWebsiteContext);
D. Document.addEventListener('''DOMContextLoaded' , personalizeWebsiteContext); - B Betweenrows Question #:125
A developer wrote the following codeto test a sum3 function that takes in an array of numbers and returns the sum of the first three numbers in the array, and the test passes.
A different developer made changes to the behavior of sum3 to instead sum only the first two numbers present in thearray.

let res = sum3([1, 2, 3]);
console.assert(res === 6);
res = sum3([1, 5, 0, 5]);

Which two results occur when running this test on the updated sum3 function? 

Choose 2 answers
A. The line 05 assertion passes. 
B. The line 02 assertion passes. 
C. The line 02 assertion fails. 
D. The line 05 assertion fails. - BD Betweenrows Question #:126
Refer to code below: 

const objBook = { Title: 'Javascript',
};
object.preventExtensions(objBook);
constnewObjBook = objBook;
newObjectBook.author = 'Robert';

What are the values of objBook and newObjBook respectively?

A. 
[title: "javaScript"] [title: "javaScript"]
B. 
{author: "Robert", title: "javaScript}
Undefined
C. 
{author: "Robert", title: "javaScript}
{author: "Robert", title: "javaScript}
D. 
{author: "Robert"}
{author: "Robert", title: "javaScript} - A Betweenrows Question #:127
Which option is true about the strict mode in imported modules?

A. Add the statement use non-strict, before any other statements in the module to enable
not-strict mode.
B. You can only reference notStrict() functions from the imported module.
C. Imported modules are in strict mode whether you declare them as such or not.
D. Add the statement use strict =false; before any other statements in the module to enable
not- strict mode. - C Betweenrows Question #:128
Given the following code:

document.body.addEventListener(' click ', (event) => {
 if (/* CODE REPLACEMENT HERE */) {
 console.log('button clicked!');
 }
)};

Which replacement for the conditional statement on line 02 allows a developer to correctly determine that a button on page is clicked?

A. Event.clicked
B. e.nodeTarget ==this
C. event.target.nodeName == 'BUTTON' 
D. button.addEventListener('click') - C Betweenrows Question #:129
Refer to the code below: 

function changeValue(obj) {
 obj.value =obj.value/2;
}
const objA = (value: 10);
const objB = objA;
changeValue(objB);
const result = objA.value;

What is the value of result after the code executes?

A. 10
B. Nan
C. 5
D. Undefined - C Betweenrows Question #:130
Refer to the following object: 

const cat ={
 firstName: 'Fancy', 
 lastName: ' Whiskers',
 get fullName() {
 return this.firstName + ' ' + this.lastName;
 }
};

How can a developer access the fullName property for cat?

A. cat.fullName
B. cat.fullName()
C. cat.get.fullName
D. cat.function.fullName() - A Betweenrows Question #:131
A team that works on a big project uses npm to deal with projects dependencies. A developer added a dependency does not get downloaded when they executenpm install.Which two reasons could be possible explanations for this?

Choose 2 answers
A. The developer missed the option --add when adding the dependency. 
B. The developer added the dependency as a dev dependency, and
NODE_ENV
Is set to production.
C. The developer missed the option --save when adding the dependency. 
D. The developer added the dependency as a dev dependency, and
NODE_ENV is set to production. - BCD Betweenrows Question #:132
A developer creates a class that represents a blog post based on the requirement that a Post should have a body author and view count.The Code shown Below:

class Post {
 // Insert code here
 this.body = body
 this.author = author; 
 this.viewCount = viewCount; 
 }
}

Which statement should be inserted in the placeholder on line 02 to allow for a variable to be set to a new instanceof a Post with the three attributes correctly populated?

A. super (body, author, viewCount) {
B. function Post (body, author, viewCount) { 
C. constructor (body, author, viewCount) { 
D. constructor() { - C Betweenrows Question #:133
Refer to the code below:

const myFunction = arr => {
 return arr.reduce((result, current) => {
 return result = current;
 }, 10);
}

What is the output of this function when called with an empty array?

A. Returns 0
B. Throws an error 
C. Returns 10
D. Returns NaN - C Betweenrows Question #:134
At Universal Containers, every team has its own way of copyingJavaScript objects. The codeSnippet shows an implementation from one team:

function Person() {
 this.firstName = "John";
 this.lastName = 'Doe';
 this.name =() => ( console.log('Hello $(this.firstName) $(this.firstName)'); )
}
const john = new Person ();
const dan = JSON.parse(JSON.stringify(john));
dan.firstName = 'Dan';
dan.name();

What is the Output of the code execution?

A. Hello Dan Doe
B. Hello John DOe
C. TypeError: dan.name is not a function
D. TypeError: Assignment to constant variable. - C Betweenrows Question #:135
A developer wants to create an object from a function in the browser using the code below:

function Monster() {
 this.name = 'hello'
};
const z = Monster();

What happens due to lack of the new keyword on line 02?

A. The z variable is assigned the correct object.
B. The z variable is assigned the correct object but this.name remains undefined. 
C. Window.name is assigned to 'hello' and the variable z remains undefined.
D. Window.m is assigned the correct object. - C Betweenrows Question #:136
Refer to the code below:

new Promise((resolve, reject) => {
 const fraction = Math.random();
 if( fraction >0.5) reject("fraction > 0.5, " + fraction);
 resolve(fraction);
})
.then(() => console.log("resolved"))
.catch((error) => console.error(error))
.finally(() => console.log(" when am I called?"));

When does Promise.finally on line 08 get called? 

A. When rejected
B. When resolved and settled
C. WHen resolved
D. When resolved or rejected - D Betweenrows Question #:137
Given HTML below:

<div>
 <div id ="row-uc"> Universal Container</div>
 <div id ="row-aa">Applied Shipping</div>
 <div id ="row-bt"> Burlington Textiles </div>
</div>

Which statement adds the priority = account CSS class to the universal COntainers row ?

A. 
document.querySelector('#row-uc').classes.push('priority-account');
B. 
document .queryElementById('row-uc').addclass('priority-account');
C. 
document .querySelector('#row-uc').classList.add('priority-account');
D. 
document .querySelectorALL('#row-uc').classList.add('priority-account'); - B Betweenrows Question #:138
Which two console logs outputs NaN? 

Choose 2 answers
A. console.log(10/ Number('5')); 
B. console.log(parseInt('two')); 
C. console.log(10/ ''five);
D. console.log(10/0); - BC Betweenrows Question #:139
Refer to the code below:

const addBy = ?
const addByEight = addBy(8);
const sum = addBYEight(50);

Which two functions can replace line 01 and return 58 to sum? 

Choose 2 answers
A.
const addBy = function(num1) {
 return function(num2) {
 return num1 + num2;
 }
}

B. const addBy = function(num1) {return num1 + num2;}
C. const addBy = (num1) => num1 + num2;
D. const addBY = (num1) => (num2) => num1 + num2; - AD Betweenrows Question #:140
Refer to the code snippet below: 

let array = [1, 2, 3, 4, 4, 5, 4, 4]; 
for (let i =0; i < array.length; i++) {
 if (array[i] === 4) {
 array.splice(i, 1);
 }
}

What is the value of array after the code executes?

A. [1, 2, 3, 4, 5, 4, 4] 
B. [1, 2, 3, 4, 4, 5, 4]
C. [1, 2, 3, 5]
D. [1, 2, 3, 4, 5, 4] - D Betweenrows Question #:141
Which three browser specific APIs are available for developers to persist data between page loads ? 

Choose 3 answers
A. IIFEs
B. indexedDB
C. Global variables 
D. Cookies
E. localStorage. - ABE Betweenrows Question #:142
A developer creates a generic function to log custom messages in the console. 
To do this, the function below is implemented.

01 function logStatus(status) {
02 console./*Answer goes here*/{'Item status is: %s', status};
03 }

Which three console logging methods allow the use of string substitution in line 02?

A. Assert 
B. Log
C. Message 
D. Info
E. Error - ABD Betweenrows Question #:143
A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console.
Here is the HTML file content:

<input type =" text" value="Hello" name ="input"><button type ="button" >Display </button>

 The developer wrote the javascript code below: 
const button = document.querySelector('button');
button.addEvenListener('click', () => (const input = document.querySelector('input');
console.log(input.getAttribute('value'));

When the user clicks the button, the output is always "Hello".
What needs to be done to make this code work as expected?

A. Replace line 04 with console.log(input .value);
B. Replace line 03 with const input = document.getElementByName('input'); 
C. Replace line 02 with button.addCallback("click", function() {
D. Replace line 02 withbutton.addEventListener("onclick", funct - A Betweenrows Question #:144
Refer to the code below:

let​ greeting = "​Goodbye"​;
let​ salutation = ​"Hello, hello, hello"​;
try​ {
 greeting = "​Hello"​;
 decodeURI("​%%%"​);​ // throws error 
 salutation = ​"Goodbye"​;
}​ catch​ (err) {
 salutation = ​"I say hello";​
}​ finally​ {
 salutation = ​" Hello, hello";​ 
}

Line 05 causes an error.What are the values of greeting and salutation once code completes?

A. Greeting is Hello and salutation is Hello, Hello.
B. Greeting is Goodbye and salutation is Hello, Hello. 
C. Greeting is Goodbye and salutation is I say Hello. 
D. Greeting is Hello and salutation is I say hello. - A Betweenrows Question #:145
Given the following code:

let x = null;
console.log(typeof x);

What is the output of the line 02?

A. "Null"
B. "X"
C. "Object"
D. "undefined" - C Betweenrows Question #:146
developer creates a new web server that uses Node.js. It imports aserver library thatuses events and callbacks for handling server functionality.The server library is imported with require and is made available to the code by avariable named server. The developer wants to log any issues that the server has while booting up.
Given the code and the information the developer has, which code logs an error at boost with an event?

A. 
server.catch ((server) => { console.log('ERROR', error); });

B.
server.error ((server) => { console.log('ERROR', error); });

C.
server.on ('error', (error) => { console.log('ERROR', error); });

D.
try { 
 server.start();
} catch(error) {
 console.log('ERROR', error); 
} - C Betweenrows Question #:147
A developer is creating a simple webpage with a button. When a userclicks this button for the first time, a message is displayed.The developer wrote the JavaScript code below, but something is missing. The message gets displayed every time a user clicks the button, instead of just the first time. 

01 functionlisten(event) {
02 alert ( 'Hey! I am John Doe');
03 button.addEventListener ('click', listen);

Which two code lines make this code work as required?

Choose 2 answers
A. On line 02, use event.first to test if it is the first execution.
B. On line 04, useevent.stopPropagation ( ),
C. On line 04, use button.removeEventListener(' click" , listen);
D. On line 06, add an option called once to button.addEventListener(). - CD Betweenrows Question #:148
Refer to the code:

function​ Animal(size, type) {
 this.​size = size || ​"small";​ 
 this.type = type || ​"Animal";​
 this.​canTalk = f​alse​;
}
let​ Pet = ​function​(size, type, name, owner) {
 Animal.call(​this​, size, type);
 this.​ name = name;
 this.​ owner = owner;
}
Pet.p​ rototype​ = Object.create(Animal.​prototype)​; let​ pet1 = ​new​ Pet();
console.log(pet1);

Given the code above, which three properties are set pet1? 

Choose 3answers:
A. Name 
B. canTalk 
C. Type 
D. Owner 
E. Size - BCE Betweenrows Question #:149
Refer to the following code:

<.html lang="en">
 <body>
 <div onclick = "console.log('Outer message') ;">
 <button id ="myButton">CLick me<button> </div>
 </body>
 <.script>
function displayMessage(ev) { ev.stopPropagation(); console.log('Inner message.'); }
const elem =document.getElementById('myButton'); elem.addEventListener('click' , displayMessage
 <./script>
</.html>

What will the console show when the button is clicked?

A. Outer message
B. Outer message Inner message
C. Inner message Outer message
D. Inner message - D Betweenrows Question #:150
Which code statement correctly retrieves and returns an object from localStorage? 

A. 
const retrieveFromLocalStorage = () => {
return JSON.stringify(window.localStorage.getItem(storageKey)); }

B.
const retrieveFromLocalStorage = (storageKey) =>{ return window.localStorage.getItem(storageKey);}

C.
const retrieveFromLocalStorage = (storageKey) =>{ return JSON.parse(window.localStorage.getItem(storageKey)); }

D.
const retrieveFromLocalStorage = (storageKey) =>{ return window.localStorage[storageKey];} - C Betweenrows Question #:151
The developer has a function that prints "Hello" to an input name. To test this, thedeveloper created a function that returns "World". However the following snippet does not print " Hello World".

const​ sayHello = (name) ​=>​ { 
 console.log(​"Hello"​ , name());
};
const​ world = () =​ >​ { return​"​world"​;};
sayHello(world);

What can the developer do to change the code to print "Hello World" ?

A. Changeline 7 to ) ();
B. Change line 2 to console.log('Hello' , name());
C. Change line 9 to sayHello(world) ();
D. Change line 5 to function world ( ) { - B Betweenrows Question #:152
Considering type coercion, what does the following expression evaluate to?
True + '13' + NaN

A. ' 113Nan '
B. 14
C. ' true13 '
D. ' true13NaN ' - D Betweenrows Question #:153
Given the following code: 

counter = 0;
const logCounter = () => { console.log(counter); };
logCounter();
setTimeout(logCOunter, 1100);
setInterval(() => {
 counter++;
 logCounter();
}, 1000);

What is logged by the first four log statements?

A. 0 0 1 2
B. 0 1 2 3 
C. 0 1 1 2 
D. 0 1 2 2 - C Betweenrows Question #:154
Given the code below: 

function myFunction() {
 a = 5;
 var b = 1;
}
myFunction();
console.log(a);
console.log(b);

What is the expected output?

A. Both lines 08 and 09 are executed, and the variables are outputted.
B. Line 08 outputs the variable, but line 09 throws an error.
C. Line 08 thrones an error, therefore line 09 is never executed.
D. Both lines 08 and 09 are executed, but values outputted are undefined. - B Betweenrows Question #:155
What is the result of the code block?

A. The console logs only 'flag'.
B. The console logs 'flag' and another flag.
C. An error is thrown.
D. The console logs 'flag' and then an error is thrown. - D Betweenrows Question #:156
Refer to the code below:

async function functionUnderTest(isOK) {
 if (isOK) return 'OK';
 throw new Error('not OK');
}

Which assertion accuretely tests the above code?

A. console.assert(await functionUnderTest(true), ' OK ')
B. console.assert(await functionUnderTest(true), ' not OK ') 
C. console.assert(awaitfunctionUnderTest(true), ' not OK ') 
D. console.assert(await functionUnderTest(true), 'OK') - D Betweenrows QUESTION NO: 155
A developer has a web server running with Node.js. The command to start the web server is node server.js. The web server started having
latency issues. Instead of a one second turnaround for web requests, the developer now sees a five second turnaround.
Which command can the web developer run to see what the module is doing during the latency period? 

A. NODE_DEBUG=true node server.js
B. DEBUG=http, https node server.js
C. NODE_DEBUG=http,https node server.js
D. DEBUG=true node server.js - D Betweenrows Which two syntax examples correctly initialize a value to the variable strLang?

A. let strLang = 'javascript'; 
B. const strLang = 'java' + 'script'; 
C. let strLang = javascript; 
D. str strLang = 'javascript'; - ANSWER:
A. let strLang = 'javascript'; 
B. const strLang = 'java' + 'script'; 

Additional Info:
Note that C doesn't have a value that has single quotes around the word 'javascript' and for D, 'str' is not a proper identifier Betweenrows Which statement sorts the following number array so it is in ascending order? const arr = [7, 3, 400, 10];

A. arr.sort(); 
B. arr.sort((a, b) => a - b);
C. arr.sort((a, b) => a < b);
D. arr.sort((a, b) => b - a); - ANSWER:
B. arr.sort((a, b) => a - b);

Additional Info:
A. The sort() function sorts values as strings, which will sort this as [10, 3, 400, 7].
C. The compare function expects a positive, negative, or 0 to be returned.
D. The compare function will actually reverse the order of the numbers. Betweenrows Which statement sorts the following string array so it is in descending order? const arr = ["Banana", "Orange", "Apple", "Mango"];

A. arr.sort(); 
B. arr.sort((a, b) => a - b);
C. arr.reverse();
D. arr.sort((a, b) => b - a); - ANSWER:
C. arr.reverse();

Additional Info:
A. The sort() function sorts values as strings in ASCENDING order: ["Apple", "Banana", "Mango", "Orange"];
B,D. Expect a number array. Betweenrows What are the different data types used in JavaScript? - ANSWER:
There are 8 basic data types in JavaScript:
1. Number for numbers of any kind: integer or floating-point, integers are limited by ±((2^53)-1).

2. BigInt is for integer numbers of arbitrary length.

3. String for strings. A string may have zero or more characters, there's no separate single-character type.

4. Boolean for true/false.

5. NULL for unknown values - a standalone type that has a single value null. Note, typeof null returns "object" even though it is NOT and object.

6. Undefined for unassigned values - a standalone type that has a single value undefined.

7. Object for more complex data structures.

8. Symbol for unique identifiers. Betweenrows Which collections of data are ordered by a key? - ANSWER:
Map and set objects. Betweenrows What is the proper syntax for adding placeholders in template literals? - ANSWER:
Use a dollar sign followed by curly brackets:
${expression}.

Additional Info:
let name = "John";
// embed a variable 
alert( `Hello, ${name}!` ); // Hello, John! 

// embed an expression 
alert( `the result is ${1 + 2}` ); // the result is 3

Note this only works if you use backticks, `, and not single(') or double(") quotes otherwise the results will be shown as literal, ie: Hello, ${name}! Betweenrows How do you instantiate a value as a BigInt?
A. Nothing, JavaScript will automatically cast a number to a BigInt if the value is greater than ((2^53) - 1)
B. const bigInt = BigInt.parse(1234567890123456789012345678901234567890);
C. const bigInt = 1234567890123456789012345678901234567890n;
D. const bigInt = BigInt.parse('1234567890123456789012345678901234567890'); - ANSWER:
C. const bigInt = 1234567890123456789012345678901234567890n;

Additional Info:
BigInt does NOT work in IE. Betweenrows Given the following Animal constructor:
function Animal(size, age) {
 this.size = size;
 this.age = age;
 this.canTalk = false;
}
Which method creates a new instance of the object?
A. Object.create('Animal');
B. new Animal('large', 10);
C. Object.prototype(Animal);
D. Object.new(Animal); - ANSWER:
B. new Animal('large', 10);

Additional Info:
A. The create method needs the object name without quotes.
C. This is an incorrect way to use a prototype. Prototypes are used to add methods to existing constructors.
D. This is not the correct way to use the new keyword. It is not a method. Betweenrows A developer wants to use a module called DatePrettyPrint. This module exports one default function called printDate(). 
How can a developer import and use the printDate() function?

A. import printDate() from '/path/DatePrettyPrint.js';
printDate();
B. import printDate from '/path/DatePrettyPrint.js';
printDate();
C. import DatePrettyPrint from '/path/DatePrettyPrint.js'; 
DatePrettyPrint.printDate();
D. import printDate from '/path/DatePrettyPrint.js';
DatePrettyPrint.printDate(); - ANSWER:
B. import printDate from '/path/DatePrettyPrint.js';
printDate();

Additional Info:
Once imported by name, you must call the imported method directly by name.

You must call the methods directly or use the * to import all methods. Betweenrows When using the `const` identifier to create an instance of an object, are the properties changeable? - ANSWER:
Yes.
An object declared as `const` can be modified. The `const` fixes the value of the object, but NOT its contents. Betweenrows A developer is not able to use a variable outside a function that is defined inside a function. What could be causing this? - ANSWER:
Variables defined INSIDE a function cannot be accessed from anywhere OUTSIDE the function, because the variable is defined only in the scope of the function. Betweenrows If an application manipulates the browser history using the History API, which event should a developer use to detect when the browser's native back or forward button is clicked?

A. popstate

B. navigate

C. pushstate

D. change - ANSWER:

A. Popstate, A popstate event is dispatched to the window each time the active history entry changes between two history entries for the same document.


Additional Info:
The navigate() method loads a specified URL.
The pushstate() method pushes the given data onto the session history stack with the specified title.
The change event is fired for changes to <input>, <select> , and <textarea> elements. Betweenrows Given two nested divs and the code below which window.onload kicks off:

the window loads and fires the following event => {

document.querySelector('.outerDiv') .addEventListener('click', displayOuterMessage, true);

document.querySelector('.innerDiv') .addEventListener('click', displayInnerMessage, true); };

What order will the event listeners be called when the innerDiv is clicked?

A. displayInnerMessage, displayOuterMessage
B. displayInnerMessage only
C. displayOuterMessage only
D. displayOuterMessage, displayInnerMessage - ANSWER:
D. displayOuterMessage, displayInnerMessage

Additional Info:
Events in the target phase will trigger all listeners on an element in the order they were registered. Betweenrows Events are fired inside the browser window and tend to attach to specific items residing in the browser. What are some of these items? - ANSWER:
A single element, set of elements, the HTML document loaded in the current tab, or the entire browser window. Betweenrows What are some of the basic DOM data types? - ANSWER:
Document, node, element, nodeList, attribute, and namedNodemap. Betweenrows What will the output be in the console for the following:

console.log(x);
var x = 10; - ANSWER:
undefined

Additional Info:
var is susceptible to hoisting. Betweenrows What will the output be in the console for the following:

console.log(x);
let x = 10; - ANSWER:
ReferenceError

Additional Info:
let and const do not do hoisting. Betweenrows What is the difference between == vs ===? - ANSWER:
== compares the direct value while === compares the direct value and type.

Additional Info:
10 == '10' // true
10 === '10' // false Betweenrows What will the output be in the console for the following:

const myDt = new Date();
console.log(myDt + 10); - ANSWER:

Today's date, plus 10 days. Betweenrows What will the output be in the console for the following:

let s_prim = 'foo' 
let s_obj = new String(s_prim) 
console.log(typeof s_prim)
console.log(typeof s_obj) - ANSWER:
String
Object Betweenrows What will the output be in the console for the following:

let s1 = '2 + 2' 
let s2 = new String('2 + 2') 
console.log(eval(s1)) 
console.log(eval(s2)) 
console.log(eval(s2.valueOf())) - ANSWER:
4
"2 + 2"
4 Betweenrows What will the output be in the console for the following:

const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';
const regex = /[A-Z]/g;
const found = paragraph.match(regex);
console.log(found); - ANSWER:
["T","I"]

Additional Info:
If the g flag is used, all matches will be returned. If the g flag is NOT used, then only the first match will be returned. Betweenrows What will the output be in the console for the following:

const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';
const regex = /[A-Z]/;
const found = paragraph.match(regex);
console.log(found); - ANSWER:
["T"]

Additional Info:
If the g flag is used, all matches will be returned. If the g flag is NOT used, then only the first match will be returned. Betweenrows What will the output be in the console for the following:
[2, 5, 9].forEach(logArrayElements); 

function logArrayElements(element, index, array) { console.log('a[' + index + '] = ' + element); 
} - ANSWER:
a[0] = 2, a[1] = 5, a[2] = 9 Betweenrows What is the difference between for ... of and for ... in while iterating over an array of elements? - for ... of iterates via elements while for ... in uses an index through the array. Betweenrows What will the output be in the console for the following:

const arr = [1, 4, 9, 16]; 
const mapA = arr.map(x => x * 2); console.log(mapA); - ANSWER:
[2,8,18,32] Betweenrows What will the output be in the console for the following:
const arr = [1, 4, 9, 16]; 
const mapA = arr.filter(x => x % 2); console.log(mapA); - ANSWER:
[4,16] Betweenrows What will the output be in the console for the following:
const arr = [1, 4, 9, 16]; 
console.log(arr.slice(1,3)); - ANSWER:
[4,9] Betweenrows What will the output be in the console for the following:
const arr = [1, 4, 9, 16]; 
const reducer = (acc, curr) => acc + curr;
console.log(arr.reduce(reducer)); - ANSWER:
30 Betweenrows What will the output be in the console for the following:
const months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
console.log(months); - ANSWER:
["Jan", "Feb", "March", "April", "June"]

Additional Info:
splice takes the position [1], notes if you should delete the number of items in the position [0], and adds the item in the splice position [ 'Feb']. Betweenrows What will the output be in the console for the following:
const months = ['Jan', 'March', 'April', 'June'];
months.splice(3, 1, 'May');
console.log(months); - ANSWER:
["Jan", "March", "April", "May"]

Additional Info:
splice takes the position [3], notes if you should delete the number of items in the position [1] (this is why June was removed), and adds the item in the splice position [ 'May']. Betweenrows What will the output be in the console for the following:
const arr = [1, 2, 3];
arr.push(6);
console.log(arr);
arr.pop();
console.log(arr);
arr.shift();
console.log(arr);
arr.unshift(8);
console.log(arr); - ANSWER:
[1,2,3,6]
[1, 2, 3]
[2,3]
[8,2,3] Betweenrows What will the output be in the console for the following:
let message = { hello : 'Hello', 
names : ['Sue', 'Joe'], 
showMessage: function() { 

this.names.forEach(function(name) { console.log(this.hello + ' ' + name); }); 
} 
} 

message.showMessage(); - ANSWER:
undefined Sue
undefined Joe

Additional Info:
Referencing the 'this' keyword inside the nested function just refers to the scope in which the object was invoked, which in this case is global, meaning the variable hello does not exist. Betweenrows What will the output be in the console for the following:
let message = { hello : 'Hello', 
names : ['Sue', 'Joe'], 
showMessage: function() { 

let self = this;
this.names.forEach(function(name) { console.log(self.hello + ' ' + name); }); 
} 
} 

message.showMessage(); - ANSWER:
Hello Sue
Hello Joe

Additional Info:
The self variable references what is known as the "lexical scope," because it was defined within the showMessage function. Betweenrows What will the output be in the console for the following:
let message = { hello : 'Hello', 
names : ['Sue', 'Joe'], 
showMessage: function() { 

this.names.forEach(name => { 
console.log(this.hello + ' ' + name); }); 
} 
} 

message.showMessage(); - ANSWER:
Hello Sue
Hello Joe

Additional Info:
The arrow function that ES6 introduced has the lexical scope built in. Betweenrows What will the output be in the console for the following:
function showContact (firstName, lastName, ...titles) { 

console.log(firstName + ' ' + lastName + ', ' + titles[0] + ' and ' + titles[1]); 
} 

showContact('Sue', 'Johnson', 'Developer', 'Architect'); - ANSWER:
Sue Johnson, Developer and Architect

Additional Info:
... allows you to take an unknown number of parameters in that space Betweenrows What will the output be in the console for the following:
let array1 = ['one', 'two']; 
let array2 = ['three', 'four']; 
array1.push(...array2); 
console.log(...array1); - ANSWER:
"one" "two" "three" "four"

Additional Info:
using ... also acts as a spread and will pull elements one at a time through. Betweenrows When creating a class in JavaScript, what is autogenerated?
A. prototype
B. constructor
C. function
D. extension - ANSWER:
B. Constructor Betweenrows What will the output be in the console for the following:
class Animal { 
constructor(name) { 
this.name = name; 
} 
printName() { 
console.log(this.name); 
} 
}
console.log(typeof Animal); - ANSWER
function

Additional Info:
the underlying object created is still a function Betweenrows How would you alias msg1 as msg3 in the example below?

import { msg2, msg1 } from './module2.js'; printMsg(msg1 + msg2); - ANSWER:
import { msg2, msg1 as msg3 } from './module2.js'; printMsg(msg3 + msg2);

Additional Info:
If you try to use the msg1 variable name you get a reference error telling you that msg1 is not defined. Betweenrows What will the output be in the console for the following:

import { printMsg } from './module1.js'; 
import { msg1, msg2 } from './module2.js'; 
msg1 = 'Did this variable change?'; 
printMsg(msg1 + msg2); - ANSWER:
TypeError: Assignment to constant variable.

Additional Info:
You CANNOT reassign the exported value. It can only be changed from inside the module it was exported from. Betweenrows Which of the following is FALSE about Modules?
A. Modules always execute in strict mode, which means that variables need to be declared.
B. They only get executed once, which is right when they are loaded.
C. Import statements get hoisted, which means that all dependencies will execute right when the module is loaded.
D. Modules must include a constructor to be exported. - ANSWER:
D. Modules must include a constructor to be exported. Betweenrows Refer to this code: 
const p1 = new Promise((resolve, reject) => { 
setTimeout(() => { resolve('P1 Resolved'); }, 1500); }); 

const p2 = (data) => new Promise((resolve, reject) => { setTimeout(() => resolve('${data}, P2 Resolved'), 1500, data); }); 

Which two answers correctly execute p1 and p2?

A. p1.then((data) => p2(data)).then(result => result);

B. async function getResult() { 
const data = await p1; 
return await p2(data); } 
getResult();

C. p1().then(function() { 
p2().then(function(result) { 
return result; }); 
});

D. async function getResult() { 
const data = p1; 
const result = p2(data); } 
await getResult(); - ANSWER:
A + B

Additional Info:
A. The method promise.then() is used to associate further action with a promise that becomes settled.
B. Using await inside the function causes both to execute.
C. The syntax is wrong for calling p1 and p2.
D. The await is outside the function calling the data. Betweenrows Refer to this code:
const getId = new Promise((resolve, reject) => { 
setTimeout(() => resolve(15), 1500); }); 

const getBook = bookId => new Promise((resolve, reject) => { setTimeout(() => resolve('${bookId}:JavaScript Algorithms'), 1500); }); 

getId.then(id => getBook(id)).then(data => data); 

What is the correct code to replace the last line with an async/await function?

A. async function getBookInfo() { 
const Id = await getId; 
const result = await getBook(id); } 
getBookInfo();

B. async function getBookInfo() { 
const Id = await getId; 
const result = await getBook(id); } 
await getBookInfo();

C. await function getBookInfo() { 
const Id = getId; 
const result = getBook(id); } 
async getBookInfo();

D. async function getBookInfo() { 
const Id = getId; 
const result = getBook(id); } 
await getBookInfo(); - ANSWER:
A.

Additional Info:
The await expression is always inside an async function. Betweenrows The promise object returned by the new Promise constructor has internal properties. What are they? - state — initially "pending", then changes to either "fulfilled" when resolve is called or "rejected" when reject is called. 

result — initially undefined, then changes to value when resolve(value) called or error when reject(error) is called Betweenrows Where can you use the await keyword and what does it do? - Keyword await only works inside async functions and makes JavaScript wait until that promise settles and returns its result. Betweenrows Which of the following is NOT a Promise state?
A. rejected
B. failed
C. pending
D. fulfilled - ANSWER:
B. failed Betweenrows Here is the package.json for the bar.awesome module: 

{"name": "bar.awesome","version": "1.3.5","peerDependencies": { "baz": "5.x" }} 

A particular project has the package.json definition below. 

{"name": "UC Project Extra","version": "0.0.5","dependencies": { "bar.awesome": "1.3.5", "baz": "6.0.0" }} 

What happens when a developer executes npm install?
A. The command fails because bar.awesome does not have any dependency.
B. The command fails because bar versions are not compatible.
C. The command succeeds but displays a warning about a version mismatch.
D. The command succeeds with no errors or warnings. - ANSWER
C. The command succeeds but displays a warning about a version mismatch.

Additional Info:
bar does have a dependency on baz.
The bar versions are compatible, but the baz versions are not.
The command does succeed but there is a warning for the mismatched baz dependency. Betweenrows Refer to the code below: 
const https = require('https');
const server = https.createServer((req, res) => { 
// Line 3: code goes here 
let reqData = JSON.parse(chunk); 
console.log(reqData);}); 
res.end('OK');}); 
server.listen(8000);
 
Which code does the developer need to add to line 03 to receive incoming request data?

A. req.on('data', (chunk) => {
B. req.get('data', (chunk) => {
C. req.data((chunk) => {
D. req.on('get', (chunk) => { - ANSWER
A. req.on('data', (chunk) => {

Additional Info
req.get is used with http requests.
req.data is what is getting passed in, not a method.
req.on('get', ... the 'get' argument is not passed in so can not be used this way. Betweenrows What are the most important items in your npm package.json file if you plan to publish a package? - The name and version. Together they form a unique identifier for the package. Betweenrows When it comes to frameworks, what is one of the main benefits of using popular frameworks? - One of the main benefits is a strong community supporting the framework. This usually results in good documentation and resources. Betweenrows When using async, what type of object is always returned?
A. Null
B. String
C. Promise
D. Map - ANSWER:
C. Promise Betweenrows What is the output of the following:

for (var i = 0; i < 3; i++) { 
setTimeout(() => console.log(i), 1); 
} 

for (let i = 0; i < 3; i++) { 
setTimeout(() => console.log(i), 1); 
}

A: 0 1 2 and 0 1 2
B: 0 1 2 and 3 3 3
C: 3 3 3 and 0 1 2 - ANSWER:
C: 3 3 3 and 0 1 2

Additional Info:
In the first loop, the var i value is GLOBAL, which means the value is set OUTSIDE of the scope of the loop. So the var i value is incremented independent of the setTimeout function firing.

let and const are block-scoped and follow the increment accordingly. Betweenrows What's the output?
const shape = { 
radius: 10, 
diameter() { return this.radius * 2; }, 
perimeter: () => 2 * Math.PI * this.radius, 
}; 
console.log(shape.diameter()); 
console.log(shape.perimeter());

A: 20 and 62.83185307179586
B: 20 and NaN
C: 20 and 63
D: NaN and 63 - ANSWER:
B: 20 and NaN

Additional Info:
Note that the value of diameter is a regular function, whereas the value of perimeter is an arrow function.

With arrow functions, the this keyword refers to its current surrounding scope, unlike regular functions! This means that when we call perimeter, it doesn't refer to the shape object, but to its surrounding scope (window for example).

There is no value radius on that object, which returns NaN. Betweenrows What's the output?
+true; 
!'Lydia';

A: 1 and false
B: false and NaN
C: false and false - ANSWER:
A: 1 and false

Additional Info:
The unary plus tries to convert an operand to a number. true is 1, and false is 0.
The string 'Lydia' is a truthy value. What we're actually asking, is "is this truthy value falsy?". This returns false. Betweenrows Which one is true?
const bird = { size: 'small', }; 
const mouse = { name: 'Mickey', small: true, };

A: mouse.bird.size is not valid
B: mouse[bird.size] is not valid
C: mouse[bird["size"]] is not valid
D: All of them are valid - ANSWER:
A.

Additional Info:
B+C both evaluate to true.
mouse.bird is not a valid path in dot notation. Betweenrows What's the output?
let c = { greeting: 'Hey!' }; 
let d; 
d = c; 
c.greeting = 'Hello'; 
console.log(d.greeting);

A: Hello
B: Hey!
C: undefined
D: ReferenceError
E: TypeError - ANSWER:
A. Hello

Additional Info:
In JavaScript, all objects interact by reference when setting them equal to each other.

First, variable c holds a value to an object. Later, we assign d with the same reference that c has to the object.

When you change one object, you change all of them. Betweenrows What's the output?
let a = 3; 
let b = new Number(3); 
let c = 3; 
console.log(a == b); 
console.log(a === b); 
console.log(b === c);

A: true false true
B: false false true
C: true false false
D: false true true - ANSWER:
C: true false false

Additional Info:
new Number() is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.

When we use the == operator, it only checks whether it has the same value. They both have the value of 3, so it returns true.

However, when we use the === operator, both value and type should be the same. It's not: new Number() is not a number, it's an object. Both return false. Betweenrows What's the output?

class Chameleon { 
static colorChange(newColor) { 
this.newColor = newColor; 
return this.newColor; 
} 

constructor({ newColor = 'green' } = {}) { 
this.newColor = newColor; 
} 

} 
const freddie = new Chameleon({ newColor: 'purple' }); console.log(freddie.colorChange('orange'));

A: orange
B: purple
C: green
D: TypeError - ANSWER:
D. TypeError

Additional Info:
The colorChange function is static. 

Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children. 

Since freddie is a child, the function is not passed down, and not available on the freddie instance: a TypeError is thrown. Betweenrows What's the output?
let greeting; 
greetign = {}; // Typo! 
console.log(greetign);

A: {}
B: ReferenceError: greetign is not defined
C: undefined - ANSWER:
A: {}

Additional Info:
It logs the object, because we just created an empty object on the global object! When we mistyped greeting as greetign, the JS interpreter actually saw this as global.greetign = {} (or window.greetign = {} in a browser).
In order to avoid this, we can use "use strict". This makes sure that you have declared a variable before setting it equal to anything. Betweenrows What happens when we do this?
function bark() { 
console.log('Woof!'); 
} 
bark.animal = 'dog';

A: Nothing, this is totally fine!
B: SyntaxError. You cannot add properties to a function this way.
C: "Woof" gets logged.
D: ReferenceError - ANSWER:
A: Nothing, this is totally fine!

Additional Info:
This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)

A function is a special type of object. The code you write yourself isn't the actual function. The function is an object with properties. This property is invocable. Betweenrows What's the output?

function Person(firstName, lastName) { 
this.firstName = firstName; 
this.lastName = lastName; 
} 

const member = new Person('Lydia', 'Hallie'); 

Person.getFullName = function() { 
return `${this.firstName} ${this.lastName}`; 
}; 

console.log(member.getFullName());

A: TypeError
B: SyntaxError
C: Lydia Hallie
D: undefined undefined - ANSWER:
A: TypeError

Additional Info:
In JavaScript, functions are objects, and therefore, the method getFullName gets added to the constructor function object itself. For that reason, we can call Person.getFullName(), but member.getFullName throws a TypeError.

If you want a method to be available to all object instances, you have to add it to the prototype property:

Person.prototype.getFullName = function() { 
return `${this.firstName} ${this.lastName}`; 
}; Betweenrows What's the output?
function Person(firstName, lastName) { 
this.firstName = firstName; 
this.lastName = lastName; 
} 

const lydia = new Person('Lydia', 'Hallie'); 
const sarah = Person('Sarah', 'Smith'); 

console.log(lydia); 
console.log(sarah);

A: Person {firstName: "Lydia", lastName: "Hallie"} and undefined
B: Person {firstName: "Lydia", lastName: "Hallie"} and Person {firstName: "Sarah", lastName: "Smith"}
C: Person {firstName: "Lydia", lastName: "Hallie"} and {}
D: Person {firstName: "Lydia", lastName: "Hallie"} and ReferenceError - ANSWER:
A: Person {firstName: "Lydia", lastName: "Hallie"} and undefined

Additional Info:
For sarah, we didn't use the new keyword. When using new, this refers to the new empty object we create. However, if you don't add new, this refers to the global object!
We said that this.firstName equals "Sarah" and this.lastName equals "Smith". What we actually did, is defining global.firstName = 'Sarah' and global.lastName = 'Smith'. sarah itself is left undefined, since we don't return a value from the Person function. Betweenrows What are the three phases of event propagation?
A: Target > Capturing > Bubbling
B: Bubbling > Target > Capturing
C: Target > Bubbling > Capturing
D: Capturing > Target > Bubbling - ANSWER:
D: Capturing > Target > Bubbling

Additional Info:
During the capturing phase, the event goes through the ancestor elements down to the target element. It then reaches the target element, and bubbling begins. Betweenrows All object have prototypes.
A: true
B: false - ANSWER:
All objects have prototypes, except for the base object. 

The base object is the object created by the user, or an object that is created using the new keyword. 

The base object has access to some methods and properties, such as .toString. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can't find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you. Betweenrows What's the output?
function sum(a, b) { 
return a + b; 
} 
sum(1, '2');
A: NaN
B: TypeError
C: "12"
D: 3 - ANSWER:
D: "12"

Additional Info:
JavaScript is a dynamically typed language: we don't specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called implicit type coercion. Coercion is converting from one type into another.
In this example, JavaScript converts the number 1 into a string, in order for the function to make sense and return a value. During the addition of a numeric type (1) and a string type ('2'), the number is treated as a string. We can concatenate strings like "Hello" + "World", so what's happening here is "1" + "2" which returns "12". Betweenrows What's the output?
let number = 0; 
console.log(number++); 
console.log(++number); 
console.log(number);
A: 1 1 2
B: 1 2 2
C: 0 2 2
D: 0 1 2 - ANSWER:
C: 0 2 2

Additional Info:
The postfix unary operator ++:
Returns the value (this returns 0)
Increments the value (number is now 1)

The prefix unary operator ++:
Increments the value (number is now 2)
Returns the value (this returns 2)

This returns 0 2 2. Betweenrows What's the output?
function getPersonInfo(one, two, three) { 
console.log(one); 
console.log(two); 
console.log(three); 
} 
const person = 'Lydia'; 
const age = 21; 
getPersonInfo`${person} is ${age} years old`;

A: "Lydia" 21 ["", " is ", " years old"]
B: ["", " is ", " years old"] "Lydia" 21
C: "Lydia" ["", " is ", " years old"] 21 - ANSWER:
B: ["", " is ", " years old"] "Lydia" 21

Additional Info:
If you use tagged template literals, the value of the first argument is always an array of the string values. The remaining arguments get the values of the passed expressions! Betweenrows What's the output?
function checkAge(data) { 
if (data === { age: 18 }) { 
console.log('You are an adult!'); 
} 
else if (data == { age: 18 }) { 
console.log('You are still an adult.'); 
} 
else { 
console.log(`Hmm.. You don't have an age I guess`); 
} 
} 

checkAge({ age: 18 });

A: You are an adult!
B: You are still an adult.
C: Hmm.. You don't have an age I guess - Answer: 
C: Hmm.. You don't have an age I guess

Additional Info:
When testing equality, primitives are compared by their value, while objects are compared by their reference. JavaScript checks if the objects have a reference to the same location in memory.

The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.

This is why both { age: 18 } === { age: 18 } and { age: 18 } == { age: 18 } return false. Betweenrows What's the output?
function getAge(...args) { 
console.log(typeof args); 
} 
getAge(21);

A: "number"
B: "array"
C: "object"
D: "NaN" - ANSWER:
C: "object"
The rest parameter (...args) lets us "collect" all remaining arguments into an array. An array is an object, so typeof args returns "object" Betweenrows What's the output?
function getAge() { 
'use strict'; 
age = 21; 
console.log(age); 
} 
getAge();

A: 21
B: undefined
C: ReferenceError
D: TypeError - ANSWER: 
C: ReferenceError

Additional Info:
With "use strict", you can make sure that you don't accidentally declare global variables. We never declared the variable age, and since we use "use strict", it will throw a reference error. If we didn't use "use strict", it would have worked, since the property age would have gotten added to the global object. Betweenrows What's the value of sum?

const sum = eval('10*10+5');

A: 105
B: "105"
C: TypeError
D: "10*10+5" - ANSWER:
A: 105

Additional Info:
eval evaluates codes that's passed as a string. If it's an expression, like in this case, it evaluates the expression. The expression is 10 * 10 + 5. This returns the number 105. Betweenrows How long is cool_secret accessible?

sessionStorage.setItem('cool_secret', 123);

A: Forever, the data doesn't get lost.
B: When the user closes the tab.
C: When the user closes the entire browser, not only the tab.
D: When the user shuts off their computer. - ANSWER:
B: When the user closes the tab.

Additional Info:
The data stored in sessionStorage is removed after closing the tab.
If you used localStorage, the data would've been there forever, unless for example localStorage.clear() is invoked. Betweenrows What's the output?
var num = 8; 
var num = 10; 
console.log(num);

A: 8
B: 10
C: SyntaxError
D: ReferenceError - ANSWER:
B: 10

Additional Info:
With the var keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.
You cannot do this with let or const since they're block-scoped. Betweenrows What's the output?

const obj = { 1: 'a', 2: 'b', 3: 'c' }; 
const set = new Set([1, 2, 3, 4, 5]); 
obj.hasOwnProperty('1'); 
obj.hasOwnProperty(1); 
set.has('1'); 
set.has(1);

A: false true false true
B: false true true true
C: true true false true
D: true true true true - ANSWER:
C: true true false true

Additional Info:
All object keys (excluding Symbols) are strings under the hood, even if you don't type it yourself as a string. This is why obj.hasOwnProperty('1') also returns true.

It doesn't work that way for a set. There is no '1' in our set: set.has('1') returns false. It has the numeric type 1, set.has(1) returns true. Betweenrows What's the output?
const obj = { a: 'one', b: 'two', a: 'three' }; 
console.log(obj);

A: { a: "one", b: "two" }
B: { b: "two", a: "three" }
C: { a: "three", b: "two" }
D: SyntaxError - ANSWER:
C: { a: "three", b: "two" }

Additional Info:
If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value. Betweenrows The JavaScript global execution context creates two things for you: the global object, and the "this" keyword.
A: true
B: false
C: it depends - ANSWER:
A: true

Additional Info:
The base execution context is the global execution context: it's what's accessible everywhere in your code. Betweenrows What's the output?
for (let i = 1; i < 5; i++) { 
if (i === 3) continue; 
console.log(i); 
}
A: 1 2
B: 1 2 3
C: 1 2 4
D: 1 3 4 - ANSWER:
C: 1 2 4

Additional Info:
The continue statement skips an iteration if a certain condition returns true. Betweenrows What's the output?
String.prototype.giveLydiaPizza = () => { 
return 'Just give Lydia pizza already!'; 
}; 
const name = 'Lydia'; 
name.giveLydiaPizza();

A: "Just give Lydia pizza already!"
B: TypeError: not a function
C: SyntaxError
D: undefined - ANSWER:
A: "Just give Lydia pizza already!"

Additional Info:
String is a built-in constructor, which we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method! Betweenrows What's the output?
const a = {}; 
const b = { key: 'b' }; 
const c = { key: 'c' }; 

a[b] = 123; 
a[c] = 456; 

console.log(a[b]);

A: 123
B: 456
C: undefined
D: ReferenceError - ANSWER:
B: 456

Additional Info:
Object keys are automatically converted into strings. We are trying to set an object as a key to object a, with the value of 123.

However, when we stringify an object, it becomes "[object Object]". So what we are saying here, is that a["[object Object]"] = 123. Then, we can try to do the same again. c is another object that we are implicitly stringifying. So then, a["[object Object]"] = 456.
Then, we log a[b], which is actually a["[object Object]"]. We just set that to 456, so it returns 456. Betweenrows What's the output?
const foo = () => console.log('First'); 
const bar = () => setTimeout(() => console.log('Second')); 
const baz = () => console.log('Third'); 
bar(); 
foo(); 
baz();

A: First Second Third
B: First Third Second
C: Second First Third
D: Second Third First - ANSWER:
B: First Third Second

Additional Info:
We have a setTimeout function and invoked it first. Yet, it was logged last.

This is because in browsers, we don't just have the runtime engine, we also have something called a WebAPI. The WebAPI gives us the setTimeout function to start with, and for example the DOM.

After the callback is pushed to the WebAPI, the setTimeout function itself (but not the callback!) is popped off the stack.

Now, foo gets invoked, and "First" is being logged.
foo is popped off the stack, and baz gets invoked. 

"Third" gets logged.
The WebAPI can't just add stuff to the stack whenever it's ready. Instead, it pushes the callback function to something called the queue.

This is where an event loop starts to work. An event loop looks at the stack and task queue. If the stack is empty, it takes the first thing on the queue and pushes it onto the stack.

bar gets invoked, "Second" gets logged, and it's popped off the stack. Betweenrows What is the event.target when clicking the button?
<div onclick="console.log('first div')"> 
 <div onclick="console.log('second div')"> 
 <button onclick="console.log('button')"> Click! </button> 
 </div> 
</div>
A: Outer div
B: Inner div
C: button
D: An array of all nested elements. - ANSWER:
C: button

Additional Info:
The deepest nested element that caused the event is the target of the event. You can stop bubbling by event.stopPropagation Betweenrows When you click the paragraph, what's the logged output?
<div onclick="console.log('div')"> 
<p onclick="console.log('p')"> Click here! </p> 
</div>
A: p div
B: div p
C: p
D: div - ANSWER:
A: p div

Additional Info:
If we click p, we see two logs: p and div. During event propagation, there are 3 phases: capturing, target, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set useCapture to true). It goes from the deepest nested element outwards. Betweenrows What's the output?
const person = { name: 'Lydia' }; 

function sayHi(age) { 
return `${this.name} is ${age}`; 
} 
console.log(sayHi.call(person, 21)); 
console.log(sayHi.bind(person, 21));

A: undefined is 21 Lydia is 21
B: function function
C: Lydia is 21 Lydia is 21
D: Lydia is 21 function - ANSWER:
D: Lydia is 21 function

Additional Info:
With both, we can pass the object to which we want the this keyword to refer to. However, .call is also executed immediately!
.bind. returns a copy of the function, but with a bound context! It is not executed immediately. Betweenrows What's the output?
function sayHi() { 
return (() => 0)(); 
} 
console.log(typeof sayHi());

A: "object"
B: "number"
C: "function"
D: "undefined" - ANSWER:
B: "number"

Additional Info:
The sayHi function returns the returned value of the immediately invoked function expression (IIFE). This function returned 0, which is type "number".

FYI: there are only 7 built-in types: null, undefined, boolean, number, string, object, and symbol. "function" is not a type, since functions are objects, it's of type "object". Betweenrows Which of these values are falsy?
0; 
new Number(0); 
(''); 
(' '); 
new Boolean(false); 
undefined;

A: 0, '', undefined
B: 0, new Number(0), '', new Boolean(false), undefined
C: 0, '', new Boolean(false), undefined
D: All of them are falsy - ANSWER:
A: 0, '', undefined

Additional Info:
There are 8 falsy values:
undefined
null
NaN
false
'' (empty string)
0
-0
0n (BigInt(0))
Function constructors, like new Number and new Boolean are truthy. Betweenrows What's the output?

console.log(typeof typeof 1);

A: "number"
B: "string"
C: "object"
D: "undefined" - ANSWER:
B: "string"

Additional Info:
typeof 1 returns "number". typeof "number" returns "string" Betweenrows What's the output?
const numbers = [1, 2, 3]; 
numbers[10] = 11; 
console.log(numbers);

A: [1, 2, 3, 7 x null, 11]
B: [1, 2, 3, 11]
C: [1, 2, 3, 7 x empty, 11]
D: SyntaxError - ANSWER:
C: [1, 2, 3, 7 x empty, 11]

Additional Info:
When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called "empty slots". These actually have the value of undefined, but you will see something like:
[1, 2, 3, 7 x empty, 11]
depending on where you run it (it's different for every browser, node, etc.) Betweenrows What's the output?
(() => { 
let x, y; 
try { 
throw new Error(); 
} catch (x) { 
(x = 1), (y = 2); 
console.log(x); 
} 
console.log(x); 
console.log(y); 
})();
A: 1 undefined 2
B: undefined undefined undefined
C: 1 1 2
D: 1 undefined undefined - ANSWER:
A: 1 undefined 2

Additional Info:
The catch block receives the argument x. This is not the same x as the variable when we pass arguments. This variable x is block-scoped.

Later, we set this block-scoped variable equal to 1, and set the value of the variable y. Now, we log the block-scoped variable x, which is equal to 1.

Outside of the catch block, x is still undefined, and y is 2. When we want to console.log(x) outside of the catch block, it returns undefined, and y returns 2. Betweenrows Everything in JavaScript is either a...
A: primitive or object
B: function or object
C: trick question! only objects
D: number or object - ANSWER:
A: primitive or object

Additional Info:
JavaScript only has primitive types and objects.
Primitive types are boolean, null, undefined, bigint, number, string, and symbol.

What differentiates a primitive from an object is that primitives do not have any properties or methods; however, you'll note that 'foo'.toUpperCase() evaluates to 'FOO' and does not result in a TypeError. This is because when you try to access a property or method on a primitive like a string, JavaScript will implicitly wrap the primitive type using one of the wrapper classes, i.e. String, and then immediately discard the wrapper after the expression evaluates. All primitives except for null and undefined exhibit this behaviour. Betweenrows What's the output?
[[0, 1], [2, 3]].reduce( 
 (acc, cur) => { 
 return acc.concat(cur); 
 }, 
[1, 2], 
);
A: [0, 1, 2, 3, 1, 2]
B: [6, 1, 2]
C: [1, 2, 0, 1, 2, 3]
D: [1, 2, 6] - ANSWER:
C: [1, 2, 0, 1, 2, 3]

Additional Info:
[1, 2] is our initial value. This is the value we start with, and the value of the very first acc. During the first round, acc is [1,2], and cur is [0, 1]. We concatenate them, which results in [1, 2, 0, 1].
Then, [1, 2, 0, 1] is acc and [2, 3] is cur. We concatenate them, and get [1, 2, 0, 1, 2, 3] Betweenrows What's the output?
!!null; 
!!''; 
!!1;
A: false true false
B: false false true
C: false true true
D: true true false - ANSWER:
B: false false true

Additional Info:
null is falsy. 
!null returns true. 
!true returns false.
"" is falsy. 
!"" returns true. 
!true returns false.
1 is truthy. 
!1 returns false. 
!false returns true. Betweenrows What does the setInterval method return in the browser?
setInterval(() => console.log('Hi'), 1000);
A: a unique id
B: the amount of milliseconds specified
C: the passed function
D: undefined - ANSWER:
A: a unique id

Additional Info:
It returns a unique id. This id can be used to clear that interval with the clearInterval() function. Betweenrows What does this return?
[...'Lydia'];

A: ["L", "y", "d", "i", "a"]
B: ["Lydia"]
C: [[], "Lydia"]
D: [["L", "y", "d", "i", "a"]] - ANSWER:
A: ["L", "y", "d", "i", "a"]

Additional Info:
A string is an iterable. The spread operator maps every character of an iterable to one element. Betweenrows What's the output?
function* generator(i) { 
 yield i; 
 yield i * 2; 
} 
const gen = generator(10); 
console.log(gen.next().value); 
console.log(gen.next().value);

A: [0, 10], [10, 20]
B: 20, 20
C: 10, 20
D: 0, 10 and 10, 20 - ANSWER:
C: 10, 20

Additional Info:
Regular functions cannot be stopped mid-way after invocation. However, a generator function can be "stopped" midway, and later continue from where it stopped. Every time a generator function encounters a yield keyword, the function yields the value specified after it. Note that the generator function in that case doesn't return the value, it yields the value.

First, we initialize the generator function with i equal to 10. We invoke the generator function using the next() method. The first time we invoke the generator function, i is equal to 10. It encounters the first yield keyword: it yields the value of i. The generator is now "paused", and 10 gets logged.

Then, we invoke the function again with the next() method. It starts to continue where it stopped previously, still with i equal to 10. Now, it encounters the next yield keyword, and yields i * 2. i is equal to 10, so it returns 10 * 2, which is 20. This results in 10, 20. Betweenrows What does this return?
const firstPromise = new Promise((res, rej) => { 
setTimeout(res, 500, 'one'); 
}); 

const secondPromise = new Promise((res, rej) => { 
setTimeout(res, 100, 'two'); 
});
 
Promise.race([firstPromise, secondPromise]).then(res => console.log(res));

A: "one"
B: "two"
C: "two" "one"
D: "one" "two" - ANSWER:
B: "two"

Additional Info:
When we pass multiple promises to the Promise.race method, it resolves/rejects the first promise that resolves/rejects. To the setTimeout method, we pass a timer: 500ms for the first promise (firstPromise), and 100ms for the second promise (secondPromise). This means that the secondPromise resolves first with the value of 'two'. res now holds the value of 'two', which gets logged. Betweenrows What's the output?
let person = { name: 'Lydia' }; 
const members = [person]; 
person = null; 
console.log(members);

A: null
B: [null]
C: [{}]
D: [{ name: "Lydia" }] - ANSWER:
D: [{ name: "Lydia" }]

Additional Info:
First, we declare a variable person with the value of an object that has a name property.

Then, we declare a variable called members. We set the first element of that array equal to the value of the person variable. Objects interact by reference when setting them equal to each other. When you assign a reference from one variable to another, you make a copy of that reference. (note that they don't have the same reference!)

Then, we set the variable person equal to null.

We are only modifying the value of the person variable, and not the first element in the array, since that element has a different (copied) reference to the object. The first element in members still holds its reference to the original object. When we log the members array, the first element still holds the value of the object, which gets logged. Betweenrows What's the output?
const person = { name: 'Lydia', age: 21, }; for (const item in person) { console.log(item); }
A: { name: "Lydia" }, { age: 21 }
B: "name", "age"
C: "Lydia", 21
D: ["name", "Lydia"], ["age", 21] - ANSWER:
B: "name","age"

Additional Info:
With a for-in loop, we can iterate through object keys, in this case name and age. Under the hood, object keys are strings (if they're not a Symbol). On every loop, we set the value of item equal to the current key it's iterating over. First, item is equal to name, and gets logged. Then, item is equal to age, which gets logged. Betweenrows What are the two main properties of an error object that's passed as an argument to catch in a try...catch construct?

A. name and stacktrace
B. title and message
C. title and stack
D. name and message - ANSWER:
D. name and message Betweenrows A developer wants to set a breakpoint in his code while in the editor so they don't have to switch to the browser. What is the in-line command for setting a breakpoint?

A. break
B. debugger
C. debug
D. breakpoint - ANSWER:
B. debugger Betweenrows What are some benefits of using breakpoints? - ANSWER:
JavaScript will stop executing at each breakpoint to let you examine the current JavaScript values. After examining the values, you can resume the execution of code. You can even step from breakpoint to breakpoint. Betweenrows What code block can be executed regardless of whether an exception was thrown or caught in a try...catch block. - ANSWER:
The finally block can be used to execute code at the end of a try...catch block. It will run even if no catch block handles the exception. Betweenrows Given the code below: 

01 let res = sumArr([2,3,4]); 

which of the following code lines will assert the sumArr method adds the numbers in the array passed in?

A. console.assert(res === 9);
B. console.log(res === 9);
C. console.assert(res != 9);
D. console.error(res != 9); - ANSWER:
A. console.assert(res === 9);

Additional Info:
The console.assert method writes an error message to the console if the assertion is false. If the assertion is true, nothing happens.

The console.error method will write whatever is passed in to the console as an error. Betweenrows Given the code below: 

01 let res = sum3([1, 2, 3]); 

02 console.assert(res === 6); 

The sum3 method gets updated to multiply the numbers instead of adding them. Line 02 is now a falsepositive assertion. How can the test be changed to fix it?

A. 
01 let res = sum3([1, 2, 3, 4]); 
02 console.assert(res === 10);

B. 
01 let res = sum3([1, 2]); 
02 console.assert(res === 3);

C.
01 let res = sum3([1, 2, 3, 4]); 
02 console.assert(res === 24);

D.
01 let res = sum3([3, 2, 1]); 
02 console.assert(res === 6); - ANSWER:
C.
01 let res = sum3([1, 2, 3, 4]); 
02 console.assert(res === 24);

Additional Info:
Adding another number in the sequence ensures the result is different if added or multiplied. Betweenrows If black-box testing treats software under test as a black-box without knowing its internals. What is white-box testing? - ANSWER:
White-box testing is fully aware of the internal code that is being tested and uses that as part of the testing. Betweenrows A developer wrote a method and created some test assertions for it. Another developer has now updated the method and the tests are still passing. Is this enough or should the tests be updated? - ANSWER:
The test should be verified for possible false positives. New tests should be added to assert the way the method was updated. Betweenrows What will be the log for each of the following and can certain lines be modified or deleted?

let emp = {
name: "Santanu",
dept: "IT"
}

console.log (Object.keys(emp)); 
console.log (Object.values(emp));
const returnTarget = Object.assign(emp, {a:1, b:2});
console.log(returnTarget); - ANSWER:
- Array ["name", "dept"]
- Array ["Santanu", "IT"]
- Object { a:1,b:2,dept: "IT" ,name: "Santanu" }

Additional Info:
Object.keys - returns enumerable keys
Object.values - returns list of property values
Object.assign - copy objects/properties Betweenrows What will be the outcome of the following lines of code?

let emp = {
name: "Santanu",
dept: "IT"
}

Object.seal(emp);
delete emp.name; - ANSWER:
The following will NOT be deleted.

Additional Info:
Object.freeze - objects cannot be changed anymore Betweenrows What will be the outcome of the following lines of code?

let emp = {
name: "Santanu",
dept: "IT"
}

Object.freeze(returnTarget);
returnTarget.dept = "Finance" - ANSWER:
The following value will NOT change.

Additional Info:
Object.seal - no new properties, existing properties
will be non-configurable Betweenrows What is the difference between JSON.parse and JSON.stringify? - JSON.parse - parse a JSON string and converts JavaScript value or object.

JSON.stringify - converts JavaScript object or value to JSON String. Betweenrows What is the log output for the following code?

const json = '{"result":true, "count":42}';
const obj = JSON.parse(json);
console.log(obj.result); - ANSWER:
true Betweenrows What is the log output for the following code?

console.log(JSON.stringify([new Number(3), new String('false'), new
Boolean(false)])); - ANSWER:
A String with the value of "[3,"false",false]" Betweenrows Which of the following is not an attribute of Object.defineProperty()?
A. Configurable
B. Stateful
C. Enumerable
D. Writeable - ANSWER:
B. Stateful

Additional Info:
Configurable: the ability to redefine property descriptors (ie enumerable or configurable). If configurable is set to false for a given property, you can NOT delete the property.

Enumerable: ability to iterate over a given property with a for...in loop. Also impacts Object.keys() and JSON serialize properties.

Writeable: allows a value of an associated property to be changed. Betweenrows What will be the log output for the following?

let emp = {
fName: 'Test',
lName: 'User',
get fullName(){
return fName + ' ' + lName;
},
set fullName(str){
var nameParts = str.split(' ');
this.fName = nameParts[0];
this.lName = nameParts[1];
}
}
emp.fullName ='John Smith';

console.log(emp.fName);

A. Test
B. Undefined
C. John
D. TypeError - ANSWER:
C. John Betweenrows What is the difference between a function's prototype and an object's prototype? - A function's prototype is the object instance that will become the prototype for objects created using this function as a constructor.

An object's prototype is the object instance from which the object is inherited. Betweenrows What will be the output log of the following code:

function Person (fName, lName) {
this.fName = fName;
this.lName = lName;
}

Person.prototype.age = 29;
let jim = new Person('Jim', 'Smith');

jim.age = 18;

console.log(jim.age);
console.log(jim.__proto___.age); - ANSWER:
18
29

Additional Info:
jim.age actually creates a new property on the jim object while the .__proto__.age is in reference to the parent object in which jim was created from.

If jim.age was NOT set, then the values would be 29 and 29. JavaScript looks at the object property first and then the prototype. Betweenrows What will be the output logs of the following code:

function Person (fName, lName) {
this.fName = fName;
this.lName = lName;
}

Person.prototype.age = 29;
let jim = new Person('Jim', 'Smith');
let sofia = new Person('Sofia', 'Smith');

console.log(jim.__proto__.age);
console.log(sofia.age);

Person.prototype = {age : 18};

let Kris = new Person('Kris','Cooper');

console.log(Kris.age); - ANSWER:
29
29
18

Additional Info:
Remember that JavaScript initially checks the object's property before checking the Prototype.
You can also reference a new object in a prototype as well. Betweenrows Complete the following code snippet:

function Person(fName, lName, age){
 ....
}

function Student(fName, lName, age) {
// What should be called here?
....
}

// What two lines need to be called here? - ANSWER:
Person.call(this, fName, lName, age);

Student.prototype = Object.create(Person.prototype);

Student.prototype.constructor = Student; Betweenrows Complete the following code snippet:

class Person {
constructor(fName, lName, age) {
....
}
....
}

class Student extends Person {
constructor(fName, lName, age) {
// what needs to be called here to instantiate the parent class?
....
}
....
} - ANSWER:
super(fName, lName, age); Betweenrows What is the order of the values in the console:

setTimeout(() => console.log('1'), 0);

function getFirstThing() {
 setTimeout(() => console.log('2'), 1000);
}

function getSecondThing() {
 console.log('3');
}

async function getThings() {
 await getFirstThing();
 await getSecondThing();
}

setTimeout(() => console.log('4'), 1100);
console.log('5');
getThings();

A. 51324
B. 15234
C. 53124
D. 14523 - ANSWER:
C. 53124

Additional Info:
the setTimeout functions get pushed to the webapi and then pushed to the task queue. From there, if the stack is empty, the first item in the task queue is then pushed into the stack.

Since 5 and 3 are the first on the stack, they get called and 1, 2,4 go to the webapi and then the task queue. 1 completes in 0 seconds, 2 completes 1 second, and 4 completes in 1.1 seconds. Betweenrows What's the output?
const settings = { 
username: 'lydiahallie', 
level: 19, 
health: 90, }; 
const data = JSON.stringify(settings, ['level', 'health']); 
console.log(data);

A: "{"level":19, "health":90}"
B: "{"username": "lydiahallie"}"
C: "["level", "health"]"
D: "{"username": "lydiahallie", "level":19, "health":90}" - ANSWER:
A: "{"level":19, "health":90}"

Additional Info:
The second argument of JSON.stringify is the replacer. The replacer can either be a function or an array, and lets you control what and how the values should be stringified.
If the replacer is an array, only the property names included in the array will be added to the JSON string. In this case, only the properties with the names "level" and "health" are included, "username" is excluded. data is now equal to "{"level":19, "health":90}".
If the replacer is a function, this function gets called on every property in the object you're stringifying. The value returned from this function will be the value of the property when it's added to the JSON string. If the value is undefined, this property is excluded from the JSON string. Betweenrows What's the output?
let num = 10; 

const increaseNumber = () => num++; 
const increasePassedNumber = number => number++; 

const num1 = increaseNumber(); 
const num2 = increasePassedNumber(num1); 

console.log(num1); 
console.log(num2);
A: 10, 10
B: 10, 11
C: 11, 11
D: 11, 12 - ANSWER:
A: 10, 10

Additional Info:
The unary operator ++ first returns the value of the operand, then increments the value of the operand. The value of num1 is 10, since the increaseNumber function first returns the value of num, which is 10, and only increments the value of num afterwards.

num2 is 10, since we passed num1 to the increasePassedNumber. number is equal to 10(the value of num1. Again, the unary operator ++ first returns the value of the operand, then increments the value of the operand. The value of number is 10, so num2 is equal to 10. Betweenrows What's the output?
const value = { number: 10 }; 
const multiply = (x = { ...value }) => { 
console.log((x.number *= 2)); }; 

multiply(); 
multiply(); 
multiply(value); 
multiply(value);
A: 20, 40, 80, 160
B: 20, 40, 20, 40
C: 20, 20, 20, 40
D: NaN, NaN, 20, 40 - ANSWER:
C: 20, 20, 20, 40

Additional Info:
In ES6, we can initialize parameters with a default value. The value of the parameter will be the default value, if no other value has been passed to the function, or if the value of the parameter is "undefined". In this case, we spread the properties of the value object into a new object, so x has the default value of { number: 10 }.

The default argument is evaluated at call time! Every time we call the function, a new object is created. We invoke the multiply function the first two times without passing a value: x has the default value of { number: 10 }. We then log the multiplied value of that number, which is 20.

The third time we invoke multiply, we do pass an argument: the object called value. The *= operator is actually shorthand for x.number = x.number * 2: we modify the value of x.number, and log the multiplied value 20.

The fourth time, we pass the value object again. x.number was previously modified to 20, so x.number *= 2 logs 40. Betweenrows What's the output?
[1, 2, 3, 4].reduce((x, y) => console.log(x, y));

A: 1 2 and 3 3 and 6 4
B: 1 2 and 2 3 and 3 4
C: 1 undefined and 2 undefined and 3 undefined and 4 undefined
D: 1 2 and undefined 3 and undefined 4 - ANSWER:
D: 1 2 and undefined 3 and undefined 4

Additional Info:
The first argument that the reduce method receives is the accumulator, x in this case. The second argument is the current value, y. With the reduce method, we execute a callback function on every element in the array, which could ultimately result in one single value.

In this example, we are not returning any values, we are simply logging the values of the accumulator and the current value.

The value of the accumulator is equal to the previously returned value of the callback function. If you don't pass the optional initialValue argument to the reduce method, the accumulator is equal to the first element on the first call.

On the first call, the accumulator (x) is 1, and the current value (y) is 2. We don't return from the callback function, we log the accumulator and current value: 1 and 2 get logged.

If you don't return a value from a function, it returns undefined. On the next call, the accumulator is undefined, and the current value is 3. undefined and 3 get logged.

On the fourth call, we again don't return from the callback function. The accumulator is again undefined, and the current value is 4. undefined and 4 get logged. Betweenrows With which constructor can we successfully extend the Dog class?
class Dog { 
constructor(name) { 
 this.name = name; 
 } 
};

class Labrador extends Dog {
 // 1 
constructor(name, size) { 
 this.size = size; 
} 

// 2 
constructor(name, size) { 
 super(name); 
 this.size = size; 
} 

// 3 
constructor(size) { 
 super(name); 
 this.size = size; 
} 

// 4 
constructor(name, size) { 
 this.name = name; 
 this.size = size; 
}
 };
A: 1
B: 2
C: 3
D: 4 - ANSWER:
B. 2 
constructor(name, size) { 
 super(name); 
 this.size = size; 
} 

Additional Info:
In a derived class, you cannot access the this keyword before calling super. If you try to do that, it will throw a ReferenceError: 1 and 4 would throw a reference error.
With the super keyword, we call that parent class's constructor with the given arguments. The parent's constructor receives the name argument, so we need to pass name to super.
The Labrador class receives two arguments, name since it extends Dog, and size as an extra property on the Labrador class. They both need to be passed to the constructor function on Labrador, which is done correctly using constructor 2. Betweenrows Why would a developer specify a package.jason as a developed forge instead of a dependency ?
A. It should be bundled when the package is published.
B. Other required packages depend on it for development.
C. It is only needed for local development and testing.
D. It is required by the application in production. - C Betweenrows What are two unique features of functions defined with a fat arrow as compared to normal function definition?Choose 2 answers
A. If the function has a single expression in the function body, the expression will be evaluated and implicit returned.
B. The function receives an argument that is always in scope, called parentThis, which is the enclosing lexical scope.
C. The function uses the this from the enclosing scope.
D. The function generated its own this making it useful for separating the function's scope from its enclosing scope. - AD Betweenrows A developer wants to define a function log to be used a few times on a single-file JavaScript script.
01 // Line 1 replacement
02 console.log('"LOG:', logInput);
03 }
Which two options can correctly replace line 01 and declare the function for use? Choose 2 answers

A. function leg(logInput) {
B. const log(loginInput) {
C. const log = (logInput) => {
D. function log = (logInput) { - AC Betweenrows After user acceptance testing, the developer is asked to change the webpage background based on user's location. This change was implemented and deployed for testing.The tester reports that the background is not changing, however it works as required when viewing on the developer's computer.Which two actions will help determine accurate results?Choose 2 answers
A. The tester should disable their browser cache.
B. The developer should rework the code.
C. The tester should dear their browser cache.
D. The developer should inspect their browser refresh settings. - CD Betweenrows A developer at Universal Containers is creating their new landing page based on HTML, CSS, and JavaScript.
To ensure that visitors have a good experience, a script named personalizeWebsiteContent needs to be executed when the webpage is fully loaded (HTML content and all related files), in order to do some custom initializations.
Which implementation should be used to call Fe:s:-a;::eHec5;te::.-.ter.: based on the business requirement above?
A. Add a listener to the window object to handle the DOMContentLoaded event
B. Add a handler to the personalizeWebsiteContent script to handle the load event
C. Add a listener to the window object to handle the lead event
D. Add a handler to the personalizeWebsiteContent script to handle the DOMContentLoaded event - C Betweenrows A developer initiates a server with the file server,js and adds dependencies in the source codes package,json that are required to run the server.
Which command should the developer run to start the server locally?
Options:
A. start server,js
B. npm start server,js
C. npm start
D. node start - C Betweenrows Which two options are core Node.js modules?Choose 2 answers
A. isotream
B. http
C. exception
D. worker - BD Betweenrows developer uses the code below to format a date.
const date= new Date(2020,05,10);
const dateDis ={year:'numeric', month:'long',day:'numeric'};
const fdate = date.toLocaleDateString('en',dateDis);
console.log(fdate);
After executing, what is the value of formattedDate?
A. June 10, 2020
B. May 10, 2020
C. November 05, 2020
D. October 05, 2020 - A Betweenrows Which three options show valid methods for creating a fat arrow function?Choose 3 answers
A. x => ( console.log(' executed ') ; )
B. ( ) => ( console.log(' executed ') ;)
C. [ ] => ( console.log(' executed ') ;)
D. X,y,z => ( console.log(' executed ') ;)
E. (x,y,z) => ( console.log(' executed ') ;) - ABE Betweenrows Refer to the code below:
Function Person(firstName, lastName, eyecolor) {
this.firstName =firstName;
this.lastName = lastName;
this.eyeColor = eyeColor;
}
Person.job = 'Developer';
const myFather = new Person('John', 'Doe');
console.log(myFather.job);
What is the output after the code executes?
A. Developer
B. Undefined
C. ReferenceError: eyeColor is not defined
D. ReferenceError: assignment to undeclared variable "Person" - C Betweenrows A developer wants to use a module called DatePrettyPrint. This module exports one default function called printDate().
How can a developer import and use the printDate() function?
A. import printDate() from '/path/DatePrettyPrint.js';
printDate();
B. import printDate from '/path/DatePrettyPrint.js';
printDate();
C. import DatePrettyPrint from '/path/DatePrettyPrint.js';
DatePrettyPrint.printDate();
D. import printDate from '/path/DatePrettyPrint.js';
DatePrettyPrint.printDate(); - B Betweenrows Refer to code below:
Const objBook = {Title: 'Javascript',};
Object.preventExtensions(objBook);
Const newObjBook = objBook;
newObjectBook.author = 'Robert';
What are the values of objBook and newObjBook respectively ?
A. [title: "javaScript"] [title: "javaScript"]
B. {author: "Robert"}{author: "Robert", title: "javaScript}
C. {author: "Robert", title: "javaScript}Undefined
D. {author: "Robert", title: "javaScript}{author: "Robert", title: "javaScript} - A Betweenrows bar.awesome is a popular JavaScript module. the versions publish to npm are:
1.2
1.3.1
1.3.5
1.4.0
Teams at Universal Containers use this module in a number of projects. A particular project has the package, json definition below.
{ 
"name" : "UC Project Extra", 
"version" : "0.0.5",
"dependency" : { "bar.awesome" : "~1.3.0" }
}
A developer runs this command: npm install.Which version of bar .awesome is installed?
A. 1.4.0
B. 1.3.5
C. 1.3.1
D. The command fails, because version 1.3.0 is not found - B Betweenrows Universal Containers recently launched its new landing page to host a crowd-funding campaign. The page uses an external library to display some third-party ads. Once the page is fully loaded, it creates more than 50 new HTML items placed randomly inside the DOM, like the one in the code below:
<!--This is an ad -->
<div class="ad-library-item ad-hidden" onload="myFunction()">
<img src="/ad-library/ad01.gif" />
</div>
All the elements includes the same ad-library-item class, They are hidden by default, and they are randomly displayed while the user navigates through the page.
A. Use the browser to execute a script that removes all the element containing the class ad-library-item.
B. Use the browser console to execute a script that prevents the load event to be fired.
C. Use the DOM inspector to remove all the elements containing the class ad-library-item.
D. Use the DOM inspector to prevent the load event to be fired. - C Betweenrows Refer to the following array:
Let arr = [1, 2, 3, 4, 5];
Which three options result in x evaluating as [1, 2]?Choose 3 answer
A. let x = arr. slice (0, 2);
B. let x = arr. slice (2);
C. let x arr.filter((a) => (return a <= 2 });
D. let x = arr.filter ((a) => 2 }) ;
E. let x =arr.splice(0, 2); - ACE Betweenrows let arr = [1,2,3,4,4,5,4,4];
for(let i=0;i<arr.length;i++){
 if(arr[i] ==4){
 arr.splice(i,1);
 i--;
 }
}
console.log(arr); - [1,2,3,5] Betweenrows Refer to the code below:
Const resolveAfterMilliseconds = (ms) => Promise.resolve (
setTimeout (( => console.log(ms), ms ));
Const aPromise = await resolveAfterMilliseconds(500);
Const bPromise = await resolveAfterMilliseconds(500);
Await aPromise, wait bPromise;
What is the result of running line 05?
A. aPromise and bPromise run in parallel.
B. Only aPromise runs.
C. aPromise and bPromise run sequentially.
D. Neither aPromise or bPromise runs. - A Betweenrows Universal Containers (UC) notices that its application that allows users to search foraccounts makes a network request each time a key is pressed. This results in too manyrequests for the server to handle.● Address this problem, UC decides to implement a debounce function on string changehandler.What are three key steps to implement this debounce function?Choose 3 answers:
A. Ensure that the network request has the property debounce set to true.
B. When the search string changes, enqueue the request within a setTimeout.
C. If there is an existing setTimeout and the search string change, allow the existingsetTimeout to finish, and do not enqueue a new setTimeout.
D. If there is an existing setTimeout and the search string changes, cancel the existingsetTimeout using the persisted timerId and replace it with a new setTimeout.
E. Store the timeId of the setTimeout last enqueued by the search string change handle. - BDE Betweenrows Which option is true about the strict mode in imported modules?
A. Imported modules are in strict mode whether you declare them as such or not.
B. Add the statement use non-strict, before any other statements in the module to enablenot-strict mode.
C. You can only reference notStrict() functions from the imported module.
D. Add the statement use strict =false; before any other statements in the module to enablenot- strict mode. - A. 

Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import Betweenrows A developer is setting up a Node,js server and is creating a script at the root of the source code, index,js, that will start the server when executed. The developer declares a variable that needs the folder location that the code executes from.Which global variable can be used in the script?
A. _dirname
B. window.location
C. _filename
D. this.path - A

`__dirname` is a global variable in Node.js that represents the directory name of the current module. It provides the absolute path of the directory containing the currently executing script. Betweenrows In the browser, the window object is often used to assign variables that require the broadest scope in an application Node.js application does not have access to the window object by default.Which two methods are used to address this ?Choose 2 answers
A. Create a new window object in the root file.
B. Assign variables to the global object.
C. Assign variables to module.exports and require them as needed.
D. Use the document object instead of the window object. - BC Betweenrows Which three statements are true about promises ?Choose 3 answers
A. A fulfilled or rejected promise will not change states .
B. A Promise has a .then() method.
C. The executor of a new Promise runs automatically.
D. A settled promise can become resolved.
E. A pending promise can become fulfilled, settled, or rejected. - ABC Betweenrows A developer has two ways to write a function:
Option A:
function Monster() {This.growl = () => {Console.log ("Grr!");}}
Option B:
function Monster() {};
Monster.prototype.growl =() => {console.log("Grr!");}
After deciding on an option, the developer creates 1000 monster objects.How many growl methods are created with Option A Option B?
A. 1000 growl method is created for Option A. 1 growl methods are created for Option B.
B. 1 growl method is created regardless of which option is used.
C. 1 growl method is created for Option A. 1000 growl methods are created for Option B.
D. 1000 growl methods are created regardless of which option is used. - A Betweenrows A developer is setting up a new Node.js server with a client library that is built using events and callbacks.The library:* Will establish a web socket connection and handle receipt of messages to the server* Will be imported with require, and made available with a variable called we.The developer also wants to add error logging if a connection fails.Given this info, which code segment shows the correct way to set up a client with two events that listen at execution time?
A. ws.on ('connect', ( ) => {
console.log('connected to client'); 
ws.on('error', (error) => { console.log('ERROR' , error); });
});
B. try{
ws.connect (( ) => {
console.log('connected to client'); });
} catch(error) { console.log('ERROR' , error); };}
C. ws.connect (( ) => {
console.log('connected to client'); }).catch((error) => { 
console.log('ERROR' , error); }};
D. ws.on ('connect', ( ) => { console.log('connected to client'); }}; ws.on('error' - D Betweenrows A developer has the function, shown below, that is called when a page loads.
function onload() {console.log("Page has loaded!");}
Where can the developer see the log statement after loading the page in the browser?
A. Browser performance toots
B. On the webpage.
C. Terminal running the web server.
D. Browser javaScript console - D Betweenrows Refer to the code declarations below:
let str1 = 'Java';
let str2 = 'Script';
Which three expressions return the string JavaScript?Choose 3 answers
A. $(str1) $ (str2} ';
B. Str1 + str2;
C. Str1.concat (str2);
D. Concat (str1, str2);
E. Str1.join (str2); - ABC Betweenrows Refer to the code below:Const 
resolveAfterMilliseconds = (ms) => Promise.resolve (
setTimeout (( => console.log(ms), ms ));
Const aPromise = await resolveAfterMilliseconds(500);
Const bPromise = await resolveAfterMilliseconds(500);
Await aPromise, await bPromise;
What is the result of running line 05?
A. aPromise and bPromise run sequentially.
B. Neither aPromise or bPromise runs.
C. Only aPromise runs.
D. aPromise and bPromise run in parallel. - A Betweenrows GIven a value, which three options can a developer use to detect if the value is NaN?Choose 3 answers !
A. Object.is(value, NaN)
B. value == NaN
C. Number.isNaN(value)
D. value ! == value
E. value === Number.NaN - ACD Betweenrows Which code statement correctly retrieves and returns an object from localStorage?
A. const retrieveFromLocalStorage = (storageKey) =>{return JSON.parse(window.localStorage.getItem(storageKey));}
B. const retrieveFromLocalStorage = () =>{return JSON.stringify(window.localStorage.getItem(storageKey));}
C. const retrieveFromLocalStorage = (storageKey) =>{return window.localStorage.getItem(storageKey);}
D. const retrieveFromLocalStorage = (storageKey) =>{return window.localStorage[storageKey];} - A Betweenrows A developer creates a simple webpage with an input field. When a user enters text in the input field and clicks the button, the actual value of the field must be displayed in the console.
Here is the HTML file content:
<input type =" text" value="Hello" name ="input">
<button type ="button" >Display </button>

The developer wrote the javascript code below:
Const button = document.querySelector('button');
button.addEvenListener('click', () => (
Const input = document.querySelector('input');
console.log(input.getAttribute('value'));
When the user clicks the button, the output is always "Hello".
What needs to be done make this code work as expected?
A. Replace line 02 with button.addCallback("click", function() {
B. Replace line 02 with button.addEventListener("onclick", function() {
C. Replace line 04 with console.log(input .value);
D. Replace line 03 with const input = document.getElementByName('input'); - C Betweenrows Refer to the code below:
01 const exec = (item, delay) =>{
02 new Promise(resolve => setTimeout( () => resolve(item), delay)),
03 async function runParallel() {
04 Const (result1, result2, result3) = await Promise.all{
05 [exec ('x', '100') , exec('y', 500), exec('z', '100')]
06 );
07 return `parallel is done: $(result1) $(result2)$(result3)`;8 }}}
Which two statements correctly execute the runParallel () function? Choose 2 answers
A . Async runParallel () .then(data);
B . runParallel ( ). done(function(data){return data;});
C . runParallel () .then(data);
D . runParallel () .then(function(data)return data - BD Betweenrows Which option is true about the strict mode in imported modules?
A. Add the statement use strict =false; before any other statements in the module to enable not- strict mode.
B. Imported modules are in strict mode whether you declare them as such or not.
C. Add the statement use non-strict, before any other statements in the module to enable not-strict mode.
D. You can only reference notStrict() functions from the imported module. - B Betweenrows Refer to the following code:
01 function Tiger(){
02 this.Type = 'Cat';
03 this.size = 'large';
04 }
05
06 let tony = new Tiger();
07 tony.roar = () =>{
08 console.log('They\'re great1');
09 };
10
11 function Lion(){
12 this.type = 'Cat';
13 this.size = 'large';
14 }
15
16 let leo = new Lion();
17 //Insert code here
18 leo.roar();
Which two statements could be inserted at line 17 to enable the function call on line 18?Choose 2 answers.
A. Leo.prototype.roar = () => { console.log('They\'re pretty good:'); };
B. Object.assign(leo,tony);
C. Leo.roar = () => { console.log('They\'re pretty good:'); };
D. Object.assign(leo,Tiger); - BC Betweenrows Which statement can a developer apply to increment the browser's navigation history without a page refresh?
A. window.history.pushState(newStateObject, ' ', null);
B. window.history.replaceState(newStateObject,' ', null);
C. window.history.pushState(newStateObject);
D. window.history.state.push(newStateObject); - A

Reference: https://gomakethings.com/how-to-update-the-browser-url-without-refreshing-the-page-using-the-vanilla-js-history-api/ Betweenrows A developer wants to create an object from a function in the browser using the code below:
Function Monster() { this.name = 'hello' };
Const z = Monster();
What happens due to lack of the new keyword on line 02?
A. The z variable is assigned the correct object but this.name remains undefined.
B. Window.name is assigned to 'hello' and the variable z remains undefined.
C. Window.m is assigned the correct object.
D. The z variable is assigned the correct object. - B Betweenrows Refer to the code below?
Let searchString = ' look for this ';
Which two options remove the whitespace from the beginning of searchString?Choose 2 answers
A. searchString.trimStart();
B. trimStart(searchString);
C. searchString.replace(/*\s\s*/, '');
D. searchString.trimEnd(); - AC Betweenrows The developer wants to test the array shown:
const arr = Array(5).fill(0)
Which two tests are the most accurate for this array ?Choose 2 answers:
A. console.assert (arr.length >0);
B. console.assert( arr.length === 5 );
C. console.assert(arr[0] === 0 && arr[ arr.length] === 0);
D. arr.forEach(elem => console.assert(elem === 0)) ; - AD Betweenrows Refer to the following code that imports a module named utils:
import (foo, bar) from '/path/Utils.js';
foo() ;
bar() ;
Which two implementations of Utils.js export foo and bar such that the code above runs without error?Choose 2 answers
A. // FooUtils.js and BarUtils.js exist
Import (foo) from '/path/FooUtils.js';
Import (boo) from ' /path/NarUtils.js';
B. const foo = () => { return 'foo' ; }
const bar = () => { return 'bar' ; }
export { bar, foo }
C. Export default class {
foo() { return 'foo' ; }
bar() { return 'bar' ; }}
D. const foo = () => { return 'foo';}
const bar = () => {return 'bar'; }
Export default foo, bar; - BC Betweenrows Given the code below:
Function myFunction(){
A =5;
Var b =1;
}
myFunction();
console.log(a);
console.log(b);
What is the expected output?
A. Both lines 08 and 09 are executed, but values outputted are undefined.
B. Line 08 outputs the variable, but line 09 throws an error.
C. Both lines 08 and 09 are executed, and the variables are outputted.
D. Line 08 thrones an error, therefore line 09 is never executed. - B Betweenrows Given the code below:
Setcurrent URL ();
console.log('The current URL is: ' +url );
function setCurrentUrl() {
Url = window.location.href:
What happens when the code executes?
A. The url variable has global scope and line 02 executes correctly.
B. The url variable has local scope and line 02 executes correctly.
C. The url variable has local scope and line 02 throws an error.
D. The url variable has global scope and line 02 throws an error. - A Betweenrows Refer to the code below
let inArray = [[1,2],[3,4,5]];
which two statements results in the array [1,2,3,4,5]?choose 2 answer
A. [ ].concat([...inArray])
B. [ ].concat.apply(inArray,[ ]);
C. [ ].concat.apply([ ],inArray);
D. [ ].concat(...inArray); - CD Betweenrows A developer has the following array of student test grades:
Let arr = [ 7, 8, 5, 8, 9 ];
The Teacher wants to double each score and then see an array of the students who scored more than 15 points.How should the developer implement the request?
A. Let arr1 = arr.map((num) => num*2). Filter (( val) => val > 15);
B. Let arr1 = arr.map((num) => ( num *2)).filterBy((val) => ( val >15 ));
C. Let arr1 = arr.filter(( val) => ( return val > 15 )) .map (( num) => ( return num *2 ))
D. Let arr1 = arr.mapBy (( num) => ( return num *2 )) .filterBy (( val ) => return val > 15 )) ; - A Betweenrows Given the expressions var1 and var2, what are two valid ways to return the concatenation of the two expressions and ensure it is string? Choose 2 answers
A. var1 + var2
B. var1.toString() + var2.toString()
C. String (var1).concat(var2)
D. String.concat(var1 +var2) - BC Betweenrows A developer tries to retrieve all cookies, then sets a certain key value pair in the cookie. These statements are used:
01 document.cookie;
02 document.cookie = 'key = John Smith';
What is the behavior?
A. Cookies are read, but the key value is not set because the value is not URL encoded.
B. Cookies are not read because line 01 should be document, cookies, but the key value is set and all cookies are wiped.
C. Cookies are read and the key value is set, and all cookies are wiped.
D. A Cookies are read and the key value is set, the remaining cookies are unaffected. - D Betweenrows A developer is setting up a Node,js server and is creating a script at the root of the source code, index,js, that will start the server when executed. The developer declares a variable that needs the folder location that the code executes from.Which global variable can be used in the script?
A. _dirname
B. _filename
C. this.path
D. window.location - A. _dirname Betweenrows Refer to the code below
let inArray = [[1,2],[3,4,5]];
which two statements results in the array [1,2,3,4,5]? 
Choose 2 answer
A. [ ].concat([...inArray])
B. [ ].concat.apply(inArray,[ ]);
C. [ ].concat.apply([ ],inArray);
D. [ ].concat(...inArray); - C. [ ].concat.apply([ ],inArray);
D. [ ].concat(...inArray); Betweenrows What are two unique features of functions defined with a fat arrow as compared to normal function definition? Choose 2 answers
A. The function generated its own this making it useful for separating the function's scope from its enclosing scope.
B. The function uses the this from the enclosing scope.
C. If the function has a single expression in the function body, the expression will be evaluated and implicit returned.
D. The function receives an argument that is always in scope, called parentThis, which is the enclosing lexical scope. - A. The function generated its own this making it useful for separating the function's scope from its enclosing scope.
C. If the function has a single expression in the function body, the expression will be evaluated and implicit returned. Betweenrows Which statement can a developer apply to increment the browser's navigation history without a page refresh?
A. window.history.pushState(newStateObject);
B. window.history.state.push(newStateObject);
C. window.history.replaceState(newStateObject,' ', null);
D. window.history.pushState(newStateObject, ' ', null); - D. window.history.pushState(newStateObject, ' ', null);
pushState(state, unused)
pushState(state, unused, url)
https://developer.mozilla.org/en-US/docs/Web/API/History/pushState Betweenrows Refer to the code below: 
let greeting = "Goodbye";
let salutation = " Hello, hello, hello";
try {
greeting = "Hello";
decodeURI("%%%"); // throws error line 5
salutation = "Goodbye";
} catch (err) {
salutation = "I say hello";
} finally {
salutation = " Hello, Hello";
}
Line 05 causes an error. What are the values of greeting and salutation once code completes?
A. Greeting is Hello and salutation is Hello, Hello.
B. Greeting is Goodbye and salutation is I say Hello.
C. Greeting is Goodbye and salutation is Hello, Hello.
D. Greeting is Hello and salutation is I say hello. - A. Greeting is Hello and salutation is Hello, Hello. Betweenrows True or False: When implementing promise chaining, .then statements should return a value, so that that value can be passed to the next .then statement - True Betweenrows Call Stack - -Think: Pile of pancakes on Waffle House griddle
-Place in memory that keeps track of the function executing and the functions that will be executed after that
-First in, last out Betweenrows Callback Queue - -Think: List of orders at Waffle House
-A list of functions that need to be processed Betweenrows Event Loop - -Think: The cook at the Waffle House
-Constantly checking if the Call Stack is empty and checking for items in the Callback Queue. If the Call Stack is empty, it grabs an item from the Callback Queue and adds the function to the Call Stack so that code execution can occur Betweenrows Functions can be defined as a ______ or an ____________ . - declaration; expression Betweenrows Named functions - -Defined in a decaration
-function sum(num1, num2){ 
return num1 + num2
}
-Can be called earlier than when it is defined due to function hoisting
-Scope: When defined within a code block, available everywhere inside that block, but not outside of it. Betweenrows Function expressions - -let sum = function(a, b){
 return a+b 
}
-Created only when the execution reaches it, and is usable only from that moment onward (no hoisting)
-Scope: Available inside or outside the block of code where it is defined Betweenrows Immediately Invoked Function Expressions (IIFE) - - (function() { 
console.log('hello') 
}
-Created and immediately called. No function name is needed Betweenrows Anonymous Functions - - setTimeout(function() {
 console.log('it has been one second') 
}, 1000);
-Can be used as an argument to other functions or as an immediately invoked function expression Betweenrows Arrow Functions - -this is how the cool kids do it
- const hello = () => { 
console.log('hello') 
}
-For a single line arrow function, you have the option of removing the curlybraces. When you do that, the return keyword is also implied, and no longer needs to be included
-if there is only 1 parameter, the parentheses are optional and can be removed. But if there are no parameters, you still need the empty parentheses Betweenrows Arrow functions and 'this' keyword - -Traditional syntax: 'this' keyword is set to the object that invoked the function
-Arrow functions: 'this' keyword is determined by the context of where the function is CALLED. So if you call the function in the global scope, and it uses a property that is only available in some more local scope, you'll get an error Betweenrows Outer Function - encloses other functions inside its code block Betweenrows Inner Function - contained within code block of an outer function Betweenrows Closure - Allows a function to access its parent scope (outer variables) even after the function that created the parent scope has completed execution Betweenrows Recursive Function - a function that calls itself Betweenrows .apply() - passes in a new Array for keyword 'this' to be bound to Betweenrows .call() - passes in a new Comma-separated list for keyword 'this' to be bound to Betweenrows .bind() - passes in anything else for keyword 'this' to be bound to Betweenrows Ways to create a new object - -Object() constructor
-object initializer/object literal syntax, where you use an expression with curly braces
-Object.create({}) method Betweenrows Property names can be - any valid JS string or value that can be converted to string Betweenrows Scenarios where you would need to use bracket notation instead of dot notation to access an object property - -If the name of the property is not a valid identifier (like if the property name includes a space)
-If the property name is not known until runtime Betweenrows Getter - -Golden retriever running off to get your property for you
-Defined in an object to get the value of a specific property, prefixed with 'get' Betweenrows Setter - -Irish Setter on his way to set the value of your property, he can only carry one parameter at a time but he's very good at it
-Defined in an object to set the value of a specific property, prefixed with 'set' and accepts ONE parameter Betweenrows Objects are automatically passed by ___________ . - reference (no copy created in memory) Betweenrows Primitives are automatically passed by _____ . - value (copy of original variable is created in memory, so changes made to the copied variable do NOT affect the original variable) Betweenrows .assign() - copies all the enumerable own properties from one or more source objects to a target object Betweenrows .entries() - returns an array of the key-value pairs of an object's own enumerable string properties Betweenrows .values - returns an array of all the values of an object's own enumerable string properties Betweenrows .defineProperties() - define new or modify existing properties of an object Betweenrows .freeze() - freezes an object so that changes can no longer be made to it Betweenrows .preventExtensions() - prevents the addition of new properties to a specified object Betweenrows .seal() - prevents new properties from being added to an object, BUT existing properties can still be changed as long as they are configurable Betweenrows .is() - determines whether two values are the same Betweenrows hasOwnProperty() - determines whether an object contains the specified property as a direct property Betweenrows isPrototypeOf() - determines whether an object is the prototype chain of the specified object Betweenrows toString() - used to get string representation of the specified object Betweenrows valueOf() - used to get the primitive value of the specified object Betweenrows Decorator - -Wrapper function that can be used to extend the behavior of another function
-Syntax: @decoratorName
-Receives the original function as a parameter and returns a new function that alters the behavior
-The original function remains unchanged Betweenrows Higher-order function - -Receives a function or returns another function
-Can serve as a decorator, but cannot be used to extend classes and their methods Betweenrows Which methods of the Date object can be used to display a time in the Coordinated Universal Time Zone? - - .toUTCString()
- .toISOString() Betweenrows let val1 = 100;
let val2 = '100';

Which statements produce a Boolean value of true? - -val1 == val2
- !!val2
- val1 === Number(val2) Betweenrows True or False: The logical && and || operators do short-circuit evaluation, so the end value is one of the two original values. No Boolean is returned. - True Betweenrows True or False: The string 'true' can be coerced to a numeric value. - False Betweenrows True or False: The boolean 'true' can be coerced to the number 1 and the boolean 'false' can be coerced to 0. - True Betweenrows True or False: The string '1000' cannot be coerced to a numeric value. - False Betweenrows To store an object in the browser's local storage, what method is used? - JSON.stringify() Betweenrows Custom events - -Created using the CustomEvent() constructor and dispatched using the dispatchEvent() method. Betweenrows target - DOM event property that refers to the element that triggered an event Betweenrows currentTarget - DOM event property that refers to the element to which the event listener is attached Betweenrows Capturing phase - Browser checks for an event handler for the fired event on the outermost parent and runs it. It then does the same thing for each subsequent child element, moving top to bottom until it reaches the target element Betweenrows Bubbling phase - Browser checks for an event handler for the fired event on the target element and runs it. It then does the same thing for each subsequent parent element, moving bottom to top until it reaches the < html > tag. Betweenrows stopPropagation() - Event method that prevents further propagation of the current event in the capturing and bubbling phases. It does not prevent occurrence of default behaviors associated with the event Betweenrows preventDefault() - Event method that can prevent occurrence of the default action associated with an event, like a form submitting when a button on it is clicked. Betweenrows location - -returns the URL of the current window
-assigning a string URL to this property redirects the browser to the URL Betweenrows history - -contains the browser session history, which contains methods for moving forward or backward in the history, as well as other methods to manipulate it Betweenrows open() - -method that can be used to open a link in the current window or tab, or a new one
-settings like window size, position, scrollbar visibility, etc can be customized Betweenrows scrollTo() - -can be used to programmatically scroll to a specific location in the document by providing a set of x and y coordinates Betweenrows Document - represents the root document object of the HTML page Betweenrows Node - -any element in an HTML document Betweenrows Element - -represents a node of type element, like < table > . Betweenrows NodeList - -represents an array of elements
-document.querySelectorAll() returns one of these Betweenrows Attribute - -standard or non-standard property defined on an html element, like the id of a < div > element Betweenrows namedNodeMap - -array of elements in no particular order whose items can be accessed by name or index Betweenrows Elements panel - -Devtools panel that can be used to inspect and edit HTML elements on a page
-Changes are not saved automatically
-Styles tab can be used to inspect and edit styles & classes Betweenrows Console panel - -Allows viewing logged messages
-Can also be used to execute JS Betweenrows Sources panel - -Can be used to debug JS
-File Navigator pane shows every file that the page requests
-Code Editor pane shows contents of file selected in File Navigator pane
-Javascript Debugging pane contains various tools for inspecting JS Betweenrows Common ways of debugging JS using the Sources panel - -Breakpoints
-Stepping through code
-Checking variables Betweenrows Breakpoint - -Allows you to pause JS code execution
-All values can be examined at the moment of the pause Betweenrows Stepping through code - -Walking through code execution one line at a time Betweenrows Checking variables - -Scope pane can be used to check values of local, global, and closure variables Betweenrows Watch pane - -Allows monitoring of the values of variables over time Betweenrows Network panel - -Used to inspect the network activity of a page
-Check whether resources are being downloaded or uploaded
-Inspect properties of an individual resource, such as HTTP headers, content, and size
-the Network Log logs all network activity. Each row represents a resource
-bandwidth throttling can be used to simulate network bandwidth congestion and see how the page behaves in different network states
-Browser cache can be disabled to prevent caching
-Different options for reloading a page Betweenrows DOM API - Manipulate the structure, style, or content of a page Betweenrows Fetch API - Make requests to a server Betweenrows History API - Navigate and manipulate browser history Betweenrows Geolocation API - Get location information from the user's device Betweenrows Canvas API - Draw 2D graphics on a web page programmatically Betweenrows URL API - Access and modify the properties of a URL Betweenrows Web Storage API - Store data in session storage and local storage Betweenrows Options object - Can be passed as an argument to addEventListener() to specify options, including capture, once, passive, and signal Betweenrows Capture (event option) - -Event option represented by a boolean that indicates whether the event will be dispatched to the listener before being dispatched to any EventTarget beneath it in the DOM tree
-Default is false Betweenrows Once (event option) - -Event option represented by a boolean that indicates that the listener should be invoked a maximum of one time
-If true, the listener is automatically removed when invoked
-Default is false Betweenrows Passive (event option) - -Event option represented by a boolean that indicates that the function specified by the listener will never call preventDefault()
-If true on a listener that does call preventDefault(), nothing happens except a console warning
-Default is false, but in all browsers except Safari, it defaults to true for wheel, mousewheel, touchstart, and touchmove events Betweenrows Signal (event option) - -Event option that is part of the AbortSignal interface
-Listener will be removed when the given AbortSignal object's abort() method is called
-Default is no AbortSignal associated with the listener Betweenrows NodeJS debugger - -Start it by passing the 'inspect' argument when starting up node
-$ node inspect helloWorld.js
-options include setting breakpoints, watching variables, stepping to the next breakpoint, stepping into a function call, and continuing code execution Betweenrows Breakpoints (NodeJS debugger) - -set breakpoints using setBreakpoint(x) and clear them with clearBreakpoint(x) where x=the line number where you want to set the breakpoint
-Conditional breakpoints also possible where an expression evaluates to true using setBreakpoint(x, 'y') where y=your conditional expression Betweenrows Watchers (NodeJS debugger) - -Allows you to watch expression and variable values while debugging. At every breakpoint, each expression from the watchers list will be evaluated in the current context and displayed
- watch('x') where x is the expression you want to watch. 
- the 'watchers' command prints active watchers Betweenrows Stepping (NodeJS debugger) - -cont or c : Continues execution
-next or n : steps to Next breakpoint
-step or s: Steps into a function
-out or o: steps Out of a function
-pause: Pauses running code Betweenrows .then() - -Async method that returns a promise
-Performs a callback when the promise resolves or rejects
-Is chainable Betweenrows .catch() - -Async method that returns a promise
-Performs a callback only if the promise rejects
-Is chainable Betweenrows .finally() - -Async method that returns a promise
-Performs a callback once the promise settles, no matter how it settles--in other words, this will always run
-Is chainable Betweenrows .flat() - -Array method that takes an array of sub-arrays and returns a copy with all of them 'flattened' into a single array
-Optional argument specifies the depth to which it should be flattened. Default is 1, so ['a',['b',['c']]] would only flatten to ['a',['b','c']] unless you call .flat(2) or .flat(Infinity) Betweenrows console.assert() - -Console method that writes an error message to the console if the statement is false. If the statement is true, you get nothing
- console.assert(assertion, message)
-Optional message argument specifies the message that the console should spit out on failure
-I can't upload my own images without paying for Quizlet Premium but the image for this really should be the Dr. Phil 'L' meme Betweenrows Global object - -For node.js apps, variables can be defined as properties on the 'global' object to make them globally accessible. Betweenrows True or False: You can use the window object in Node.js. - False Betweenrows File System (fs) module - Node module that enables interaction with the file system, like reading from a file or writing to a file Betweenrows HTTP module - Node module that is necessary for setting up and running a server Betweenrows Path module - Node module that provides utilities for working with file and directory paths Betweenrows DNS module - Node module that enables name resolution Betweenrows Cookie - -Document property that allows reading and writing of cookies
- document.cookie = 'key=value' adds a cookie to the document Betweenrows npm start - NPM command used to run a command specified in the 'start' property of the 'scripts' object in the package.json file Betweenrows npm run - NPM command used to run the specified command that has been added as a property in the 'scripts' object Betweenrows npm test - NPM command used to run the command that has been added as the value of the 'test' property in the 'scripts' object of the package.json file Betweenrows console.clear() - -Console method that clears the console Betweenrows console.count() - -Console method that logs the number of times this line has been called with the given label
-console.count() or console.count(label) Betweenrows console.countReset() - -Console method that resets the value of the counter with the given label Betweenrows console.debug() - -Console method that outputs a message to the console with the log level 'debug'
-console.debug(object) or console.debug(msg) Betweenrows console.dir() - -Console method that displays an interactive listing of the properties of a specified Javascript object
-Lets you use disclosure triangles to examine the contents of child objects Betweenrows console.dirxml() - -Console method that displays an XML/HTML element representation of the specified object if possible or the Javascript Object view if it is not possible Betweenrows console.error() - -Console method that outputs an error message
-String substitution and additional arguments are available Betweenrows console.group() - -Console method that creates a new inline group, indenting all following output by another level
-To move back out a level, call console.groupEnd() Betweenrows console.groupCollapsed() - -Console method that creates a new inline group, indenting all following output by another level
-Unlike group(), starts with the inline group collapsed requiring the use of a disclosure button to expand it Betweenrows console.groupEnd() - -Console method that exits the current inline group Betweenrows console.info() - -Console method that allows informative logging of information
-String substitution and additional arguments are available Betweenrows console.log() - -Console method that logs whatever you pass in to the console.
-String substitution and additional arguments are available Betweenrows console.table() - -Console method that displays data in a table Betweenrows console.time() - -Console method that starts a timer
-The name of the timer is specified as an argument
-Up to 10,000 timers can run on a given page at the same time Betweenrows console.timeEnd() - -Console method that stops the specified timer and logs the elapsed time in milliseconds since it started Betweenrows console.trace() - -Console method that outputs a stack trace Betweenrows console.warn() - -Console method that outputs a warning message
-String substitution and additional arguments are available Betweenrows console.timeLog() - -Console method that logs the current value of a timer that was started using console.time() WITHOUT stopping it Betweenrows Element.classList - -Element property that includes .add, .toggle, .remove, and .replace methods for manipulating the classes on an element Betweenrows Window object - -Contains methods and properties 
- .parent() retrieves a reference to the parent window from a child frame
- .document() returns a reference to the document that the window contains
- .frameElement() returns the element in which the window is embedded Betweenrows How can you simulate a slower connection using Chrome DevTools? - -Network Panel > Throttling > Slow 3G, then Empty Cache and Hard Reload Betweenrows Promise.race([arr]) - -Promise method that takes an array of promises and returns the first one to settle. Betweenrows Pretty-print - -Option in the Sources panel of Chrome DevTools that shows the JS code in a more human-readable format Betweenrows extends - -Keyword that can be used in class declarations or expressions to create a class as a child of another class
-The child class can overwrite a method in the parent class Betweenrows Function hoisting - -Allows a function to be called before it has been declared. The function is basically dragged up to the top of the current scope
-Function hoisting only works with function DECLARATIONS, like 
function square(n) { return n * n; }
-Function EXPRESSIONS are not hoisted, like 
const square = function (n) { return n * n; }
-Nicolas Cage is being hoisted up and away with the DECLARATION of Independence, and the FBI can only EXPRESS their dismay from the ground Betweenrows Console module - Node.js core module that provides tools for debugging Betweenrows Stream module - Node.js core module that provides an API for implementing the stream interface Betweenrows Util module - Node.js core module that provides various utilities for supporting the Node.js internal APIs Betweenrows JSON.stringify() - -Converts a value to a JSON string
-Functions are not valid JSON values, so they are omitted from the result if the stringifed value is an object
-In arrays, functions are converted to null Betweenrows JSON.parse() - -Converts a string into a Javascript object Betweenrows ^ (carat symbol) - -In package.json file, allows updates with the given version number or a version that is greater but in the same MAJOR range Betweenrows > < >= <= - (comparison operators) - -In package.json file, can be used to specify an inclusive range of acceptable update version numbers, such as greater than or equal to 3.1.0 (>=3.1.0) Betweenrows ~ (tilde symbol) - -In package.json file, used to include everything greater than or equal to the specified version but still within the same MINOR range Betweenrows .splice() - -Removes elements from given array starting from specific index
-Optional: Specify how many elements to remove (default is all beyond the starting point)
-Optional: Specify something to insert at the splicing point

arr.splice(start, deleteCount, itemToInsert) Betweenrows .slice() - -Returns a shallow copy of an array into a new array object selected from starting index
-Optional: Specify ending index

arr.slice(start, end) Betweenrows .reduce() - -Moving LEFT TO RIGHT, executes a specified callback function on each element of an array, passing in the return value from the calculation on the preceding element. 
-The final result of doing this to all elements in the array is a single value
-Allows you to do things like adding all array elements together 

arr.reduce((accumulator, currentValue) => {//result of doing that//}) Betweenrows .reduceRight() - -Moving RIGHT TO LEFT, executes a specified callback function on each element of an array, passing in the return value from the calculation on the preceding element. 
-The final result of doing this to all elements in the array is a single value
-Allows you to do things like adding all array elements together 

arr.reduceRight((accumulator, currentValue) => {//result of doing that//}) Betweenrows .shift() - -Removes the first element of an array and returns it Betweenrows .some() - -Tests whether at least one element in the array passes the test implemented by the specified function
-Returns true if it does, and false if it doesn't
-Does not modify the array

arr.some((element) => {element ==="Kermit"}) Betweenrows .sort() - -Sorts elements of array in place and returns reference to the same array, now sorted
-Default order is ascending, but arguments can be passed indicating how to sort Betweenrows .toString() - -Returns a string representing the specified array and its elements Betweenrows .unshift() - -Adds one or more elements to the beginning of an array and returns the new length Betweenrows .values() - -Returns a new array iterator object that iterates the value of each index in the array Betweenrows .padStart() - -Pads a specified string with another string until the resulting string reaches a specified length
-Padding is applied from the start
padStart(targetLength, padString) Betweenrows .padEnd() - -Pads a specified string with another string until the resulting string reaches a specified length
-Padding is applied from the end
padStart(targetLength, padString) Betweenrows .substring() - -Returns part of a string between specified beginning and end indexes
-If no end index is passed, the resulting substring is from the starting index to the end of the original string
substring(indexStart, indexEnd) Betweenrows history.pushState() - Adds a new entry to browser session history Betweenrows history.replaceState() - Modifies current browser history entry without adding a new entry to the session history Betweenrows history.back( ) - Navigates one page backward in browser session history Betweenrows history.go() - Navigate forward or backward in session history by a specified number of pages
-Passing in a negative number will move backward
history.go(-3) ---> moves you 3 pages backward Betweenrows arguments object - -Array-like object accessible inside of functions that contains the values of the arguments passed to the function
-NOT accessible within arrow functions
-Useful for functions called with more arguments than they are formally declared to accept Betweenrows delete operator - -Completely removes a given property from an object, and returns true on successful deletion
-This is different from just setting the property equal to null or an empty string--it will no longer be part of the object Betweenrows fs.readFileSync() - -Blocking method in Node.js that allows reading a file synchronously
-Returns the content of the file Betweenrows fs.readFile() - -Non-blocking method that allows reading a file asynchronously Betweenrows fs.writeFileSync() - -File system method used to write data to the specified file synchronously
-Requires specification of the file and the data to be written
-Replaces existing content of the file Betweenrows for...in - -Looping statement that can be used to iterate enumerable properties of an object Betweenrows inspect - -Flag that can be used when starting a Node.js application to enable the V8 inspector for debugging, which allows use of Chrome DevTools Betweenrows Capturing phase vs. Bubbling phase - -When an event is fired, imagine that the browser is running its finger along the tabs of a bunch of nested file folders in a filing cabinet, trying to find the one that was clicked on
-This is called the capturing phase. It's trying to "capture" the folder that was clicked, and in order to do that it has to go through all the other folders that are enclosing it
-Once it finds the one that called the event, the event moves back up and out through those same folders, making its way out of the filing cabinet
-This is called the bubbling phase. The event is bubbling its way up through all of its enclosing folders
-Both of these phases can be stopped in their tracks using e.stopPropagation()
https://www.youtube.com/watch?v=F1anRyL37lE Betweenrows Await - -Pauses code execution in an async function until the promise settles
-Cannot handle errors and should be used with try...catch for exception handling Betweenrows True or False: setTimeout waits to run even when the timeout is 0 ms. - True Betweenrows True or False: Iterators and generators can't be used interchangeably. - False Betweenrows True or False: Between iterators and generators, iterators are usually easier to implement. - False Betweenrows Gatsby.js - frontend React-based JS framework Betweenrows Nest.js - Backend Express-based JS framework Betweenrows What must a variable begin with? - A letter, $ or _ Betweenrows What is a variable? - Container for a piece of data Betweenrows Are variables case sensitive? - Yes Betweenrows How do you declare variables? - using the var keyword - eg. var myName="Monica"; Betweenrows What will an undeclared variable return? - Undefined Betweenrows Two types of variable scope? - Local and Global Betweenrows What are the properties of a Local Scope? - Within a function, only available within function Betweenrows What are the properties of Global Scope? - Outside a function, available to any code outside that function (also within). Betweenrows What is Variable "Hoisting"? - Variables are hoisted to the top of the function/statement. It is useful because you can refer to variables declared later in the code. Betweenrows What is best practice regarding variable declarations? - Put variable declarations as close to the top of the scope as possible. Betweenrows Prototype Based - Each object has a prototype that it inherits properties and abilities from Betweenrows Dynamic Typing - Dynamic if the type of variable is interpreted at runtime. Betweenrows First Class Function - Treats functions as first class citizens - you can do with functions everything you can do with other elements. Betweenrows Multi Paradigm Language - Supports more than one programming paradigm - developers can work with a variety of styles within javascript. Betweenrows DOM - Document Object model. Betweenrows What is DOM? - Representation of HTML Page.... Betweenrows What are the two ways to add JS to your site? - Internally and Externally. Betweenrows How do you add JS To your site internally? - Internally using html <script></script> tag. Best practice to place it before closing body tag . Betweenrows How do you add JS to your site externally? - Add by externally linking to .js files. Betweenrows Is JS case sensitive? - Yes Betweenrows JS Statement - A command that tells the browser what to do. 

document.write("hello world");
var myName="lorna"; Betweenrows Can a statement be grouped into useable blocks called functions? - Yes. Betweenrows Datatypes - Numbers, Strings, Boolean, Arrays, Objects. Betweenrows What are the 2 types of Numbers within Datatypes? - Integer: Whole Number (-1, 450) 
Float:Decimal Point (0.1, 12.454) Betweenrows What are Strings within Datatypes? - A line of text: "frog", "a red truck" Betweenrows What kind of value does Boolean take? - True or False Betweenrows What is an Array? - Used to store multiple values in a single variable.

Real ["blue", "5", "123456"]

Refer to the whole array using its variable name 
Arrays are indexed from 0 Betweenrows Objects - Custom datatypes with properties and actions Betweenrows Operators - Used to assign values to variables and perform mathematical operations on them Betweenrows Math Based Operators -  Betweenrows Comparison Operators -  Betweenrows Example of comparison operators - var num = "5"; var numString ="5", 

==Interpreted Value

num ==numString (true) 

===Interpreted value and data type 

num===numString(false) Betweenrows Conditionals - Statements that allow for code to be executed against conditionals 

IF, ELSE statements Betweenrows Example of Conditional IF Statement - if (This condition is true) {Do this thing}

var Country = "Australia"; 
var Hemisphere, var Language;

if (country = "England") {
hemisphere = "northern";
language = "english";
} Betweenrows Example of Conditional ELSE Statement - Else statements allow us to make an alternative statement if original condition is false 

if (this condition is true){
 ...do this thing
}else{
 ...do this other thing
} Betweenrows Loops - Repetitive Conditional statements. 

Used to perform a calculation a number of times, or to iterate over a set of variables. Betweenrows Three main types of Loops - For: Set Number of Iterations 

While: Certain conditions are met 

Do...While: Certain condition is met Betweenrows For Loop Example - Repeats until a specific condition becomes false Betweenrows While Loop Example - Iterate while the condition is true 

while (condition) {
do this thing
} Betweenrows Do While Loop - Iterate while the condition is true 

do {
 ... this thing
} while(condition); Betweenrows Function - Re-useable blocks of instructions that can be executed by name. 

-Perform common tasks 
-saves time, reduces error 

function functionName (data) {
repeat action here
return outcome
} Betweenrows Function Example - function sayHello(){
alert ("hello everyone!");
} Betweenrows console.log(THING_TO_OUTPUT) - A built-in JavaScript function that will push messages to the browsers error console. It is a very useful tool for debugging code, for seeing how variables are changing in your code. You can output strings, numbers, variables, objects, arrays and combinations of these for inspection. Betweenrows Math.random() - Generates a random floating point number between 0 & 1. To convert this to a number range that we want - for example a random number between 1 & 10. First we multiply the result of Math.random() by 10 (the amount of potential numbers from 1 to 10) - this will give us numbers that range from 0 to 9.99999. Because Math.random() won't ever return the whole number 1 and to remove the decimal places, we use Math.ceil()to round the result of Math.random()*10 up to the nearest whole number. See more on the Math object. Betweenrows What type of language is JavaScript? - It is a scripting language. Betweenrows What is a scripting language? - A scripting language is a lightweight programming language. Betweenrows What would be the result of the following code?
<script>
document.write("<h1>This is a heading</h1>");
document.write("<p>This is a paragraph</p>");
</script> - It will write what is between the <h1> and <p> tags to the browser screen formatted accordingly to the respective HTML tags Betweenrows What happens if you call the "document.write" function after the document has fully loaded? - The html document will be deleted and replaced by your new content. Betweenrows The alert() function is not much used in JavaScript. What is it is useful for? - It is often quite handy for trying out code. Betweenrows What will this code do?
<p id="demo"> JavaScript can change the content of an HTML element.</p>
<script>
function myFunction() {
 x=document.getElementById("demo"); // Find the element 
 x.innerHTML="Hello JavaScript!"; // Change the content
}
</script> - It will change the text between the <p> tags to the content in quotes after x.innerHTML
Hello JavaScript! Betweenrows What does this piece of code tell the computer to do ?
x=document.getElementById("demo") - Find the Element ("demo");
document.getElementById("some id")
(The "Id" could be anything else.) Betweenrows What does this piece of code tell the computer to do?
x.innerHTML="Hello JavaScript!"; - Change the content of the x variable to Hello JavaScript! Betweenrows parseInt: If the first character cannot be converted to a number, what is returned? - NaN Betweenrows What does parseFloat do? - It parses its argument, and returns a floating point number. If it encounters a character other than a sign (+ or -), numeral (0-9), a decimal point, or an exponent, it returns the value up to that point and ignores that character and all succeeding characters. Leading and trailing spaces are allowed. Betweenrows Math.random() - This function returns a floating-point, pseudo-random number in the range 0 to 1 — that is, from 0 (inclusive) up to but not including 1 (exclusive) — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user. Betweenrows What is the DOM? - The DOM is a representation of a webpage that JavaScript can use. Betweenrows Object Prototype - function Person(first, last, age, eyecolor) {
 this.firstName = first;
 this.lastName = last;
 this.age = age;
 this.eyeColor = eyecolor; Betweenrows Which index is zero based? (The first element is 0, the second is 1, and so on.) - Array Betweenrows pop() - Removes the last element of an array, and returns that element Betweenrows push() - Adds new elements to the end of an array, and returns the new length Betweenrows shift() - Removes the first element of an array, and returns that element Betweenrows splice() - adds/removes items to/from an array, and returns the removed item(s) Betweenrows unshift() - Adds new elements to the beginning of an array, and returns the new length Betweenrows children - children property returns a collection of an element's child elements, as an HTMLCollection object

The elements in the collection are sorted as they appear in the source code and can be accessed by index numbers. The index starts at 0. Betweenrows childNodes - The childNodes property returns a collection of a node's child nodes, as a NodeList object.

The nodes in the collection are sorted as they appear in the source code and can be accessed by index numbers. The index starts at 0.

Note: Whitespace inside elements is considered as text, and text is considered as nodes. Comments are also considered as nodes.

Tip: You can use the length property of the NodeList object to determine the number of child nodes, then you can loop through all child nodes and extract the info you want. Betweenrows z-index - The z-index CSS property specifies the z-order of a positioned element and its descendants. When elements overlap, z-order determines which one covers the other. An element with a larger z-index generally covers an element with a lower one. Betweenrows clearInterval - cancels a timed, repeating action which was previously established by a call to setInterval(). Betweenrows intervalId - let intervalID = setInterval(function() { console.log("Happening every 500ms!"); }, 500);

clearInterval(intervalID); Betweenrows Object LIteral - A comma-separated list of name-value pairs wrapped in curly braces.

var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"}; Betweenrows document.querySelector() - Returns the first Element within the document that matches the specified selector, or group of selectors, or null if no matches are found. Betweenrows document.querySelectorAll() - Returns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors. The object returned is a NodeList. Betweenrows .addEventListener - ('click' ( ) {
p.textContent = input.value
}) Betweenrows .textContent - similar to .innerHTML Betweenrows .innerHTML - can read and alter the elements on a webpage Betweenrows return - ends function execution and specifies a value to be returned to the function caller Betweenrows ternary - this.items = items !== undefined ? items : [];
(if items is undefined, return items; otherwise return the array) Betweenrows <script>
 var toys = ["jacks", "matchbox cars", "yo-yos", "marbles"];

 // ES5
 // for(var i = 0; i < toys.length; i++){
 // console.log(toys[i]);
 // }
 
 </script> - for loop that prints all items in array Betweenrows <script>
 var toys = ["jacks", "matchbox cars", "yo-yos", "marbles"];

 // ES6
 // for(var toy of toys){
 // console.log(toy);
 // }

 </script> - for of loop that prints all items in array Betweenrows <script>
 var toys = ["jacks", "matchbox cars", "yo-yos", "marbles"];

 // jQuery
 // $.each(toys, function(index, value){
 // console.log(value);
 // });
 
</script> - The $.each() function internally retrieves and uses the length property of the passed collection. Betweenrows button.addEventListener('click', () => {
 p.innerHTML = input.value + ':';
}); - When the button is clicked, the text between the <p> tags is changed per what is typed into input box Betweenrows What is a dataset? - The dataset property on the HTMLElement interface provides read/write access to all the custom data attributes (data-*) set on the element. This access is available both in HTML and within the DOM. It is a map of DOMString, one entry for each custom data attribute. Betweenrows Math.floor() - A function that returns the largest integer less than or equal to a given number. Betweenrows parseFloat() - This function parses a string and returns a floating point number.

This function determines if the first character in the specified string is a number. If it is, it parses the string until it reaches the end of the number, and returns the number as a number, not as a string. Betweenrows parseInt() - This function parses a string and returns an integer. (Only the first number gets returned.) Betweenrows Node properties to navigate between nodes with JavaScript - parentNode, childNodes[nodenumber], firstChild, lastChild, nextSibling, previousSibling Betweenrows A common error in DOM processing - to expect an element node to contain text Betweenrows The value of the text node - can be accessed by the node's innerHTML property Betweenrows The same as: var myTitle = document.getElementById("demo").innerHTML; - var myTitle = document.getElementById("demo").firstChild.nodeValue;
var myTitle = document.getElementById("demo").childNodes[0].nodeValue; Betweenrows Two special properties that allow access to the full document - document.body - The body of the document
document.documentElement - The full document Betweenrows nodeName always contains this - the uppercase tag name of an HTML element Betweenrows The nodeValue property specifies the value of a node. Name three specific uses of nodeValue: - nodeValue for element nodes is null
nodeValue for text nodes is the text itself
nodeValue for attribute nodes is the attribute value Betweenrows The most important nodeType properties are: - ELEMENT_NODE 1 <h1 class="heading">W3Schools</h1>
ATTRIBUTE_NODE 2 class = "heading" (deprecated)
TEXT_NODE 3 W3Schools
COMMENT_NODE 8 <!-- This is a comment -->
DOCUMENT_NODE 9 The HTML document itself (the parent of <html>)
DOCUMENT_TYPE_NODE 10 <!Doctype html> Betweenrows In terms of DOM, <html> = - document.documentElement Betweenrows In terms of DOM, <body> = - document.body Betweenrows In terms of DOM, <head> = - document.head Betweenrows elem.childNodes[0] === - elem.firstChild Betweenrows elem.childNodes[elem.childNodes.length - 1] === - elem.lastChild Betweenrows elem.hasChildNodes() - used to check whether there are any child nodes Betweenrows childNodes - It looks like an array but it's not. It's a collection - a special array-like iterable object Betweenrows Three core programmatic technologies to learn about as a Salesforce developer. - 1. Lightning Component Framework: A UI development framework similar to AngularJS or React.
2. Apex: Salesforce's proprietary programming language with Java-like syntax.
3. Visualforce: A markup language that lets you create custom Salesforce pages with code that looks a lot like HTML, and optionally can use a powerful combination of Apex and JavaScript. Betweenrows Lightning Component - a user interface development framework for desktop and mobile. Using prebuilt and custom Lightning components, you can quickly develop sleek and consistent UIs for your apps. Betweenrows Developer Console - is the Salesforce integrated development environment (IDE) that you can use to develop, debug, and test code in your org. Betweenrows APEX - Similar to java Betweenrows Visualforce - Similar to web development. Lets you create and customize pages in Salesforce as well as integrate with other standard web technologies, including HTML, CSS, and JavaScript. Betweenrows Primary Difference between Lightning Components and Visualforce Page - The primary difference is right in the name. With Lightning components, you're developing components that can be pieced together to create pages. With Visualforce, you're developing entire pages at once. Betweenrows What types of elements do you see in the XML markup for Aura components? -  Betweenrows For sending secure notifications, which API is your best bet? -  Betweenrows Aside from Trailhead, where is the best place to learn more about Salesforce development? -  Betweenrows For sending secure notifications, which API is your best bet? - Streaming API Betweenrows Which Heroku service allows you to unify your Salesforce data with Postgres data? - Heroku Connect Betweenrows Aside from Trailhead, where is the best place to learn more about Salesforce development? - Salesforce Developer Portal Betweenrows Why use the === or !== operators - To make expressions equivalent or not depending on both type and value matching. Betweenrows When an expression expects a Boolean value, which of the following are always treated as false? - "" or ''
false
0
null
undefined
NaN Betweenrows What are falsy values? - Values that are coerced to false. 
"" or ''
0
null
undefined
NaN Betweenrows Is "this" defined by where a function is defined or where the function is called? - Where it is called Betweenrows In JavaScript, is a function an object? - Yes. In Javascript, everything is an object. Betweenrows Can functions be assigned to variables? - Yes Betweenrows Can functions be passed as parameters - Yes Betweenrows Is JavaScript single or multi-threaded? - Single Betweenrows Is javascript case sensitive? - yes Betweenrows What is the Web/browser API that makes asynchronous requests to the server without leaving the page? - Fetch API Betweenrows Explain the Shadow DOM - Creates a boundary around part of UI functionality. Prevents a parent from changing the elements or CSS of child. Prevents parent from reaching across Shadow DOM boundary. Betweenrows What API underlies the creation of all objects? - Object.create() Betweenrows Is object literal notation declarative or imperative? - Declarative Betweenrows What is a primary feature of object literal notation? - Ability to declare and assign an object all at once. It is declarative in nature. Betweenrows What are the 6 primitive types in JavaScript? - string, number, Boolean, null, undefined, and symbol Betweenrows What is a benefit of bracket notation in JavaScript? - You can name your property or function anything you want and you can pass a property or function name through a variable and call it. Betweenrows Example of bracket notation function call. - object ["functionName"](); Betweenrows Are objects in Javascript mutable? - Yes. You can add a property or function and modify the shape of an object once it's in memory. Only one instance of the object changes. Betweenrows What is the JavaScript inheritance model called? - prototype inheritance Betweenrows What is a factory function? - When a function returns another function. Betweenrows What is an anonymous function? - When a function is declared as an argument (without a name). Betweenrows What's another name for an anonymous function? - lambda Betweenrows What happens with the this pointer when a function is invoked? - The this pointer is bound to the object created in memory for the function. Betweenrows What is hoisting? - This means calling var in an if block or a loop block will assign the variable to the scope of the nearest enclosing function. Betweenrows What do Function.apply(), Function.call(), and Function.bind() - Provide ways to invoke a function while explicitly binding to a different context. Betweenrows for (let a in b) - Iterates over the enumerable properties of an object returning the property name. Can also iterate over an array returning the array index value. Betweenrows for (let a of b) - Iterates over an array and provides the value of each element. Betweenrows Array forEach (<fn (item, index)>) - Calls a callback function for each element of the array passing <element> and <index> and returns undefined. The callback function may alter the array. Betweenrows Array map (<fn>) - Calls a callback function for each element of the array and returns a new array containing the return results of the function call. It does not mutate the array. Betweenrows Array push () - Adds an element to the end of the array. Betweenrows Array splice (<starting>, <numberToDelete>, <elementsToAdd>) - Modify the contents of an array from any location. Betweenrows Array shift () - Removes the first element of an array. Betweenrows Array unshift (<elements>) - Adds one or more elements to the beginning of an array. It is like push() except at the beginning of the array instead of the end. Betweenrows Array slice (<a>, <b>) - Make a shallow copy of an entire or subset of an array starting at position <a> and ending at position <b> (but not including <b>). Betweenrows Array includes (<value>) - Returns true if the array contains the specified value. Betweenrows Array indexOf (<value>) - Returns the first index of the given element in the array. Betweenrows Array lastIndexOf (<value>) - Returns the last index of the given element in the array. Betweenrows Array findIndex (<fn>) - Returns the index of the first element that satisfies the given condition of a callback function. Betweenrows Array find (<fn>) - Returns the value of the first element that satisfies the given condition of a callback function. Betweenrows Array join (<separator>) - Joins all elements of the array separated by the specified separator and returns a string result. Betweenrows Array filter (<fn>) - Creates a new array that contains the elements which pass the given condition in a callback function. Betweenrows Array flat(<depth>) - Returns a new array containing all the sub-array elements concatenated into the original array recursively up to the specified <depth>. Betweenrows Array some(<fn>) - Checks whether or not at least one element of an array passes the given condition in a callback function. It returns true or false. Betweenrows Rest parameter (...<array_name> - Used to define a parameter of a function that collects multiple elements that are passed to the function and condenses them into a single array. Only the last parameter can be a rest parameter. Betweenrows Array.from(<iterable>,<mapFn>) - Creates a shallow copy of an array from another array or iterable object and optionally applies a map function to each element. Betweenrows Array.of(<arguments>) - Creates an array instance from an indefinite number of arguments. Betweenrows Array.isArray(<argument>) - Determines whether the <argument> is an array. It returns true or false. Betweenrows event.target - The element that triggered an event. Betweenrows event.currentTarget - The element that the event listener is attached to. Betweenrows Iterator Protocol - An object is an iterator when it implements an API method called next() that returns an object {done: <boolean>, value: <aValue>}. Note that just because an object can behave as an iterator, it is not implementing the Iterable Protocol and therefore cannot be used with for (x of y), etc. which requires that an object implement the Iterable Protocol. Betweenrows Iterable Protocol - An object is considered iterable if it has a method called [Symobol.iterator] that implements the Iterator Protocol (i.e. next() that returns the required object). When an object implements the Iterable Protocol, it can be used with built-in iteration mechanisms such as for (x of y), etc. Betweenrows Promise.all(<iterable of promises>) - Returns a resolved promise when all promises have resolved. It rejects immediately upon any of the input promises rejecting. Betweenrows Promise.allSettled(<iterable of promises>) - Returns a resolved promise after all of the provided promises have either fulfilled or rejected (i.e. settled). Betweenrows Promise.any(<iterable of promises>) - Returns a fulfilled promise as soon as one of the promises is fulfilled. Betweenrows Promise.race(<iteracble of promises>) - Returns a fulfilled promise as soon as one of the promises either fulfills or rejects. Betweenrows Promise.resolve(<value>) - Returns a resolved promise with the given value. Betweenrows Promise.reject(<value>) - Returns a rejected promise with the given reason. Betweenrows JavaScript is well-standardized around the ___ standard. - ECMAScript Betweenrows Instead of ___ frameworks, modern web applications tend to be ___ rendered. In Salesforce, this is done with the ___. - server-side;
client-side;
Lightning Component Framework Betweenrows The JS ___ is an ___ that ___ JS code. It can be part of a ___ or other ___ environment, like a ___. - runtime; engine;
interprets;
browser;
runtime; server Betweenrows The defining feature of the JS ___ is a ___. Work being done in the ___ owns the ___ and must complete its ___ logic before it hands back control of the ___. - engine;
single-threaded runtime;
stack; thread;
synchronous; 
thread Betweenrows New work can come in at any time from a number of origins, including the ___ (___) and ___ (such as geolocation or device motion). Since there's ___ one ___, there is a ___ where work awaits its turn to use the ___. - user; (UI events);
web APIs;
only; thread;
queue;
thread Betweenrows When the ___ is ___, the ___ takes work that is waiting to be done from the ___ and moves it into the ___. - stack; empty;
event loop;
queue;
stack Betweenrows The JavaScript ___ works the way it does in practice because of this ___. - language; architecture Betweenrows Because JS is built according to the ___ standard, it's constantly ___. An update to the ___ describing new ___ if published every year, then JS ___ (___ and ___) put them in place. - ECMAScript; changing;
standard; features;
engine projects;
(browser; runtime manufacturers) Betweenrows Updates can include more ___ features as JS matures. In other cases, features are added to implement ___ for existing functionality (these are called "___"). - modern language;
cleaner syntax;
"syntactic sugar" Betweenrows Implementers don't adopt every ___ or ___ at the same rate. In general, if you want to use a newer feature of the language, you should understand how well it will work in your target ___ using a resource like ___. - language feature; API;
browser(s);
caniuse.com Betweenrows If a new feature isn't implemented natively, there's often a bit of ___ written to ___ serve the purpose of that missing feature, called a ___. - code; temporarily;
polyfill Betweenrows The Lightning Component Framework uses a curated list of ___ that are applied ___ other code is run to ___ improve ___ capatibility. - polyfills; 
before;
automatically; 
browser Betweenrows JavaScript is case ___. - SENSITIVE Betweenrows Variable declaration is done using one of three operators: (3). In general, use ___ and ___. - var, let, const;
let; const Betweenrows var - scope?

var - mutable assignment? - scope = function;

mutable assignment = YES Betweenrows let - scope?

let - mutable assignment? - scope = block;

mutable assignment = YES Betweenrows const - scope?

const - mutable assignment? - scope = block;

mutable assignment = NO Betweenrows All variables are ___. The act of pointing that variable to something in ___ is called ___. Whether or not a variable can be ___ once it has initially been ___ is something is called ___. - pointers;
memory; assignment;
reassigned; assigned;
MUTABILITY Betweenrows Using var or let creates ____, whereas ___ is ___. - mutable pointers;
const; immutable Betweenrows When working with ___ (rather than ___), remember that ___ only prevents ___ your variable to a different ___. The ___ itself (its ___, ___, and so on) can still be ___. - objects; primitives;
const;
reassigning; 
object;
object;
properties; functions;
changed Betweenrows We can change anything we want about it such as calling ___ that change its ___ and even ___ new ___, but the moment we attempt to reassign it to something else--in this case by calling the ___ again--there's an ___. - functions; state;
adding; members;
constructor; 
error Betweenrows When most JS operators encounter an ___, they attempt to convert the value to a ___. This process of ___ converting a ___ is called ___. - invalid type;
valid type;
implicitly; type;
implicit type coercion Betweenrows In general (exception is ___ and ___), don't use ___. Many instances of it are confusing: for instance, ___. The ___ and ___ comparison operators common to C-family languages will attempt to convert anything to ___. - truthy; falsy;
implicit type coercion;
Boolean comparisons;
==; !=;
Boolean Betweenrows For ___ comparison, the best practice is to use ___ and ___. With these operators, ___ are only equivalent when both ___ and ___ match, and ___ comparisons are only true when their respective ___ are pointing to the same ___. - Boolean;
===; !==;
primitive types;
type; value;
object;
pointers; memory address Betweenrows When an ___ expects a ___ value, the following values are always treated as false. Apart from "false" itself, the rest of these values are ___ to ___. As a group, they are referred to as ___. - expression; Boolean;
coerced; false;
falsy Betweenrows Similarly, "true" is true, but any other value of any type is ___ to ___. These values are called ___. - coerced; true;
truthy Betweenrows This is useful if, say, you want to test for several types of ___ data by simply passing a ___ into an ___. - invalid;
variable;
if expression Betweenrows the result of a failed mathematical operation? - NaN Betweenrows an uninitialized variable? - undefined Betweenrows The ___: Tricky because what ___ points to can ___ even within the same ___. - this pointer;
this; 
change; function Betweenrows In JS, what this ___ to is not determined by where a ___ is ___, but rather where that ___ is ___. - points; 
function; DEFINED;
function; CALLED Betweenrows In JS, everything is an ___. This goes for ___ too. And like other ___, ___ can be assigned to ___, passed into ___ of other ___, and used the same way you can use any other ___. - object; functions;
objects; functions;
variables; 
parameters; functions;
object Betweenrows What is the core architecture of the JS engine?

(a) Microservice
(b) Multi-threaded
(c) Serverless
(d) Single-threaded - (d) Single-threaded Betweenrows The JavaScript ___ runs in many different places, but it's most often hosted in a ___. But the ___ is NOT the ___. - runtime engine;
browser;
JS runtime; browser Betweenrows A browser's primary job is to act as a ___ for a ___. It ___ ___ over the ___, using one of several ___ (usually ___/___). Once a ___ passes it some of those ___, the ___ needs to do something with them. At a min, ___ and ___ are rendered into a page. When a ___ contains some JS, the ___ reaches over to the ___ to ___, ___, and ___ that code. - client; web server; 
requests; resources; 
internet; 
protocols; (HTTP/HTTPS);
server; resources;
browser; 
HTML; CSS;
resource; browser;
JS runtime engine;
parse, evaluate, execute Betweenrows Likewise, while a ___ is ___, it can also reach back to the ___ to do things like modify the ___, interact with the ___, or interact with other ___. - script; executing;
browser;
web page;
local environment; 
web resources Betweenrows To make these interactions work, the ___ surfaces ___. In fact, a large part of what people think of as ___ JavaScript is actually these ___. - browser; APIs;
client-side; APIs Betweenrows Just like any other programming ___ or ___ surfaces ___ to interact with the ___ it runs on, so too does your browser. - language; platform;
APIs; environment Betweenrows Web ___ are important for these ___, so that ___ can be written once and run anywhere. - standards; APIs;
JavaScript Betweenrows Picture of the JavaScript ___:

• ___ execute on the ___ using a ___

• A ___ holds the ___ until it is done executing all ___ logic for that ___

• New ___ are ___ until the ___ is ready

• The ___ moves the next ___ into the ___ when it becomes available - runtime;

• Requests; stack; single thread;

• request; thread; synchronous; request;

• requests; queued; thread;

• event loop; queued request; stack Betweenrows We're now adding ___ to our picture of JavaScript. These ___ the core JS ___. They surface ___ that perform much of the work that is critical to the user experience of the modern web. - web APIs;
extend; language;
interfaces Betweenrows Browser APIs can:

• Interact with the ___ of the ___ rendered in the browser (___ API) - structure; current page;
(Document Object Model, or DOM API) Betweenrows Browser APIs can:

• Perform ___ to the ___ without ___ the ___ (___ API) - asynchronous requests; server;
leaving; current page;
(Fetch API) Betweenrows Browser APIs can: 

• Interact with ___, ___, and ___ - audio, video, graphics Betweenrows Browser APIs can:

• Interact with ___ surfaced to the ___ (geolocation, device orientation, client-side data storage) - device features; browser Betweenrows Most of the time, it is these ___ that ___ new ___ to the ___. - APIs;
add; requests; queue Betweenrows We're sidestepping an important piece of the JavaScript ecosystem: ___ and JavaScript ___ that ___ or ___ ___ capabilities. - third-party APIs;
libraries;
abstract; extend;
browser Betweenrows Under what circumstance is it acceptable to use implicit type coercion?

(a) Always

(b) To test a "falsy" or "truthy" variable value in an IF conditional expression. For instance, if(myVariable){...}

(c) When comparing two non-Boolean values with Boolean operators. For instance, 1 == "1".

(d) There is never a safe way to use implicit type coercion. - (b) To test a "falsy" or "truthy" variable value in an IF conditional expression. For instance, if(myVariable){...} Betweenrows For our purposes in the context of SF, we cover our JS ___: the ___. Specifically, when talking about JavaScript on the Lightning Platform, this module addresses the ___ development model. - framework;
Lightning Component Framework;
Lightning Web Component Betweenrows This simple use case would interact with the following ___:

• Fetch API (to ___ the record)
• DOM API (to ___ a new item to an ___ list)
• Client-Data Storage (to ___ the data ___) - browser APIs;

• save;
• add; HTML;
• cache; locally Betweenrows Let's dive into the ___ API, since it represents what the user ___ within ___. - DOM;
SEES; JavaScript Betweenrows When a ___ is requested and then received by a ___, the ___ parses the ___ and creates a description--a ___--of that ___. - page; browser;
browser; HTML;
model; 
page Betweenrows This ___ is used to draw the ___ in the browser's ___. It's also surfaced to ___ through the ___. - model; page;
viewport;
JavaScript; DOM Betweenrows Think of the ___ as a tree. It starts at the root of the browser's display functionality: the ___. From there, the ___ is encapsulated in ___, with the page's ___ in ___. Then the tree fans out to every bit of ___ represented on the ___. - DOM;
window;
page; window.document;
body; window.document.body;
content; page Betweenrows ___ are the most granular pieces of the ___. - Leaf nodes;
hierarchy Betweenrows As an ___, the ___ is vast, and lets you touch every part of this ___. It also has a number of ___ to optimize interaction with the ___. - API; DOM;
tree;
methods; 
DOM Betweenrows And it doesn't even ___ any ___ on a ___, or ___ with a ___ in any other way. For this reason, JavaScript ___ (reactjs, jQuery) and ___ (Angular, vuejs) have become the standard for ___ pages. - store; data; server; 
interact; server; 
libraries; frameworks;
interactive Betweenrows Such frameworks ___ away and simplify ___, and often automatically apply ___ for ___ features. The ___ is no different. - abstract; 
DOM interactions;
polyfills; missing;
Lightning Component Framework Betweenrows The DOM API is rich and flexible. Using relatively simple ___, it is easy to make ___ to the ___, ___, and ___ invoked by the ___. But pitfall: The DOM model makes it difficult to ___ pieces of the UI and ___ them from accidental (or purposeful and malicious) ___. - Javascript;
changes;
looks, behaviors, actions; UI;
encapsulate;
protect; changes Betweenrows For this reason, the ___ standard was developed. This creates a ___ around a particular part of ___ functionality. This ___ prevents a ___ from ___ the ___ or ___ of a ___. - Shadow DOM;
boundary; UI;
boundary; 
parent; changing;
elements; CSS; 
child Betweenrows The ___ also forces any ___ propagated across the ___ to ___ their ___, preventing the ___ from reaching across the ___. - Shadow DOM; 
events; boundary;
rescope; targets;
parent; 
shadow DOM boundary Betweenrows As of the Spring '19 release (API version ___), you can build ___ using two ___: the ___ model and the original ___ model. - 45.0;
Lightning components;
programming models;
Lightning Web Components;
Aura Components Betweenrows Lightning web components are custom ___ built using ___ and modern ___. ___ components and ___ components ___ coexist and interoperate on a ___. - HTML elements;
HTML; JavaScript;
Lightning web; Aura;
CAN; page Betweenrows The fundamental value of Lightning components is in building a custom ___ driven by ___. This ties into ___ because the ___ itself is driven by ___. - UI; Salesforce data;
DOM manipulation;
DOM; Salesforce data Betweenrows Every Lightning web component requires a ___. If the component contains any elements to be ___ to the user, an ___ is required too. Most components contain a ___ and an ___ in what's called a ___. - JavaScript module;
presented; HTML template;
JavaScript file; HTML file;
bundle Betweenrows Lightning Web Components make it effortless to render ___ into ___. - data; UI Betweenrows In a Lightning web component, JavaScript ___ are ___. This means when a ___ is ___ (or ___) and the new ___ is used in a ___, the component's ___ ___ and ___ the new ___. - class properties; reactive;
property's value;
assigned; reassigned;
property; template;
DOM; rerenders;
displays; value Betweenrows ___ surfaces ___ that make ___ DOM changes easy to implement as a developer. - Lightning Web Components;
features;
IMPLICIT Betweenrows ___ DOM Manipulation: ____ DOM manipulation ___ be your first strategy when building a Lightning web component, but more ___ components may require you to do so. - Explicit; Manual;
SHOULDN'T;
sophisticated Betweenrows When writing Lightning web components, you can ___ define ___ of the ___ that are ___ only when certain ___ are met. You can do this by adding an ___ or ___ directive to a ___. - explicitly;
sections; UI;
rendered; conditions;
if:true; if:false;
nested template tag Betweenrows Other ways to ___ manipulate the DOM: In some circumstances, it's OK to manipulate the DOM element display using the ___. - manually;
display CSS style Betweenrows What's the purpose of the DOM?

(a) It represents the core JavaScript language

(b) It represents the current web page

(c) All web APIs are surfaced through the DOM

(d) It allows the web page to interact with the local device - (b) It represents the current web page Betweenrows How do Lightning web components relate to the DOM?

(a) Lightning web components don't interact with the DOM

(b) Lightning web components allow automatic DOM manipulation when data changes

(c) Lightning web components allow explicit DOM changes

(d) B and C - (d) B and C Betweenrows>"""

# Split the text into rows based on "Betweenrows"
rows = large_text.split("Betweenrows")

# Create a DataFrame for better organization and manipulation
df = pd.DataFrame(rows, columns=["Questions"])

# Display the DataFrame to verify the result
print(df)

# Save the DataFrame to an Excel file
output_file = r'C:\Users\azrim\OneDrive\Bureau\questions.xlsx'
try:
    df.to_excel(output_file, index=False, sheet_name='Questions')
    print(f"Excel file created successfully at: {output_file}")
except Exception as e:
    print(f"Error while saving to Excel: {e}")
